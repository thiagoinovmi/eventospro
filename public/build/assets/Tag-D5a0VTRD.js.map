{"version":3,"file":"Tag-D5a0VTRD.js","sources":["../../../eventmie-pro/resources/js/tags_manage/components/Tag.vue"],"sourcesContent":["<template>\n    <div class=\"custom_model\">\n\n        <!-- Button trigger modal -->\n        <button type=\"button\" class=\"btn btn-secondary\" @click=\"openModal = true\" v-if=\"!edit_tag\"><i class=\"fa fa-user-tag\"></i> {{ trans('em.add_tag') }}</button>\n\n        <div class=\"modal show\" v-if=\"openModal\">\n            <div class=\"modal-dialog modal-lg w-100\">\n                <div class=\"modal-content\">\n\n                    <div class=\"modal-header\">\n                        <h1 class=\"modal-title fs-3\" id=\"exampleModalLabel\">{{ !edit_tag ? trans('em.new') : trans('em.edit') }} {{ trans('em.tag') }}</h1>\n                        <button type=\"button\" class=\"btn btn-sm bg-danger text-white close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" @click=\"close()\"><span aria-hidden=\"true\">&times;</span></button>\n                    </div>\n                    <div class=\"modal-body\">    \n                        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\">\n                            <input v-if=\"edit_tag\" type=\"hidden\" class=\"form-control lgxname\"  name=\"tag_id\" v-model=\"edit_tag.id\">\n                            <input type=\"hidden\" class=\"form-control lgxname\"  name=\"organiser_id\" v-model=\"organiser_id\">\n                            <div class=\"modal-body\">\n                                \n                                <div class=\"avatar-upload mb-3\">\n                                    <div class=\"avatar-edit\">\n                                        <label class=\"form-label\" for=\"image\">{{ trans('em.image') }}</label>\n                                        <input type=\"file\" name=\"image\" id=\"image\" class=\"form-control\" @change=\"onFileChange\"/>\n                                    </div>\n                                    <div class=\"avatar-preview\">\n                                        <div id=\"imagePreview\">\n                                            <img class=\"rounded d-block w-20\" :src=\"imageSrc\">\n                                        </div>\n                                    </div>\n                                    <span v-show=\"errors.has('image')\" class=\"help text-danger\">{{ errors.first('image') }}</span>\n                                </div>\n                                \n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"name\">{{ trans('em.title') }}<sup>*</sup></label>\n                                    <input type=\"text\" class=\"form-control lgxname\" v-model=\"title\" name=\"title\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('title')\" class=\"help text-danger\">{{ errors.first('title') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"name\">{{ trans('em.type') }}<sup>*</sup></label>\n                                    <input type=\"text\" class=\"form-control lgxname\" v-model=\"type\" name=\"type\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('type')\" class=\"help text-danger\">{{ errors.first('type') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"sub_title\">{{ trans('em.sub_title') }}</label>\n                                    <input type=\"text\" class=\"form-control lgxname\" v-model=\"sub_title\" name=\"sub_title\" >\n                                    <span v-show=\"errors.has('sub_title')\" class=\"help text-danger\">{{ errors.first('sub_title') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"website\">{{ trans('em.website') }}</label>\n                                    <input type=\"text\" class=\"form-control lgxname\" v-model=\"website\" name=\"website\" >\n                                    <span v-show=\"errors.has('website')\" class=\"help text-danger\">{{ errors.first('website') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"exampleFormControlSelect1\">{{ trans('em.profile_page') }}</label>\n                                    <select class=\"form-control\" name=\"is_page\" v-model=\"is_page\" >\n                                        <option  value=\"0\" >{{ trans('em.no') }} </option>\n                                        <option  value=\"1\" >{{ trans('em.yes') }}</option>\n                                    </select>\n                                </div>\n                                \n                                <div v-if=\"is_page > 0\">\n\n                                    <div class=\"mb-3 text-wrap\">\n                                        <label class=\"form-label\" for=\"description\">{{ trans('em.description') }}</label>\n                                        <textarea class=\"form-control\"  rows=\"3\" name=\"description\" :value=\"editorData\" style=\"display:none;\"></textarea>\n                                        <vue-editor\n                                            v-model=\"editorData\"\n                                            useCustomImageHandler\n                                            @image-added=\"(file, Editor, cursorLocation, resetUploader) => handleImageAdded(file, Editor, cursorLocation, resetUploader, 'description')\"\n                                        ></vue-editor>\n                                        <span v-show=\"errors.has('description')\" class=\"help text-danger\">{{ errors.first('description') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"phone\">{{ trans('em.phone') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"phone\" name=\"phone\" >\n                                        <span v-show=\"errors.has('phone')\" class=\"help text-danger\">{{ errors.first('phone') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"email\">{{ trans('em.email') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"email\" name=\"email\">\n                                        <span v-show=\"errors.has('email')\" class=\"help text-danger\">{{ errors.first('email') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"facebook\">{{ trans('em.facebook') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"facebook\" name=\"facebook\" >\n                                        <span v-show=\"errors.has('facebook')\" class=\"help text-danger\">{{ errors.first('facebook') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"instagram\">{{ trans('em.instagram') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"instagram\" name=\"instagram\" >\n                                        <span v-show=\"errors.has('instagram')\" class=\"help text-danger\">{{ errors.first('instagram') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"twitter\">{{ trans('em.twitter') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"twitter\" name=\"twitter\" >\n                                        <span v-show=\"errors.has('twitter')\" class=\"help text-danger\">{{ errors.first('twitter') }}</span>\n                                    </div>\n\n                                    <div class=\"mb-3\">\n                                        <label class=\"form-label\" for=\"linkedin\">{{ trans('em.linkedin') }}</label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"linkedin\" name=\"linkedin\" >\n                                        <span v-show=\"errors.has('linkedin')\" class=\"help text-danger\">{{ errors.first('linkedin') }}</span>\n                                    </div>\n\n                                </div>\n\n                            </div>\n\n                            <div class=\"modal-footer\">\n                                <button type=\"submit\"  :disabled=\"disable\" class=\"btn btn-primary\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\nimport { mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n\n    props: [\"edit_tag\", \"organiser_id\"],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    data() {\n        return {\n            imageSrc: '/ep_img/512x512.webp',\n            openModal: false,\n                \n            // important!!! declare all form fields\n            image       : null,\n            title       : null,\n            type        : null,\n            sub_title   : null,\n            phone       : null,\n            email       : null,\n            facebook    : null,\n            instagram   : null,\n            twitter     : null,\n            website     : null,\n            linkedin    : null,\n            is_page     : 0,\n            editorData  : null,\n            disable          : false,\n        }\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // reset form and close modal\n        close: function () {\n            this.$refs.form.reset();\n            this.$parent.edit_index = null;\n            this.openModal = false;\n            \n        },\n\n        editTags(){\n            this.imageSrc    = this.getImageUrl(this.edit_tag.image);\n            this.title       = this.edit_tag.title;\n            this.type        = this.edit_tag.type;\n            this.sub_title   = this.edit_tag.sub_title;\n            this.description = this.edit_tag.description;\n            this.phone       = this.edit_tag.phone;\n            this.email       = this.edit_tag.email;\n            this.facebook    = this.edit_tag.facebook;\n            this.instagram   = this.edit_tag.instagram;\n            this.twitter     = this.edit_tag.twitter;\n            this.website     = this.edit_tag.website;\n            this.linkedin    = this.edit_tag.linkedin;\n            this.is_page     = this.edit_tag.is_page;\n            this.editorData  = this.edit_tag.description;\n        },\n\n        \n        // create data\n        // preview file if any\n        onFileChange(e) {\n            let files = e.target.files || e.dataTransfer.files;\n            if (!files.length)\n                return;\n            this.createImage(files[0]);\n        },\n        createImage(file) {\n            let reader = new FileReader();\n            let vm = this;\n            reader.onload = (e) => {\n                vm.image    = e.target.result;\n                vm.imageSrc = e.target.result;\n            };\n            reader.readAsDataURL(file);\n        },\n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n                // show loader\n            this.showLoaderNotification(trans('em.processing'));\n\n            // prepare form data for post request\n            this.disable = true;\n\n            // prepare form data for post request\n            let post_url = route('eventmie.tags_store');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                \n                this.close();\n                this.showNotification('success',  trans('em.tag_saved_successfully'));\n                // reload page   \n                setTimeout(function() {\n                    location.reload(true);\n                }, 1000);\n            \n            })\n            .catch(error => {\n                \n                this.disable = false;\n                Swal.hideLoading();\n\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        updateItem() {\n            this.$emit('changeItem');\n        },\n\n        handleImageAdded: function (file, Editor, cursorLocation, resetUploader, field) {\n            if (!file || !file.type.startsWith(\"image/\")) {\n                this.showNotification(\"error\", \"Invalid file type. Please upload an image.\");\n                resetUploader();\n                return;\n            }\n\n            let post_url = route('eventmie.mytags_media'); // Same endpoint for all images\n            let formData = new FormData();\n            formData.append(\"image\", file);\n            formData.append(\"field\", field); // Pass the field parameter\n\n            axios.post(post_url, formData)\n                .then(result => {\n                    if (result.data && result.data.url) {\n                        const url = result.data.url;\n                        Editor.insertEmbed(cursorLocation, \"image\", url);\n\n                    } else {\n                        this.showNotification(\"error\", \"Image upload failed. Please try again.\");\n                    }\n                    resetUploader();\n                })\n                .catch(err => {\n                    console.error(err);\n                    this.showNotification(\"error\", \"An error occurred during the upload.\");\n                });\n        }\n\n    },\n\n    mounted(){\n       if(typeof this.edit_tag !== 'undefined') {\n            this.editTags();\n            this.openModal = true;\n        }\n    }\n}\n</script>"],"names":[],"mappings":"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"}