{"version":3,"file":"index-Den8dVED.js","sources":["../../../node_modules/vue-confirm-dialog/src/events.js","../../../node_modules/vue-confirm-dialog/src/vue-confirm-dialog.vue","../../../node_modules/vue-confirm-dialog/src/index.js","../../../eventmie-pro/resources/js/events_manage/components/Tabs.vue","../../../eventmie-pro/resources/js/events_manage/components/AISuggetion.vue","../../../eventmie-pro/resources/js/events_manage/components/Detail.vue","../../../eventmie-pro/resources/js/events_manage/components/Media.vue","../../../eventmie-pro/resources/js/events_manage/components/Location.vue","../../../eventmie-pro/resources/js/events_manage/components/Schedule.vue","../../../eventmie-pro/resources/js/events_manage/components/Timing.vue","../../../eventmie-pro/resources/js/events_manage/components/Ticket.vue","../../../eventmie-pro/resources/js/events_manage/components/Tickets.vue","../../../eventmie-pro/resources/js/events_manage/components/Poweredby.vue","../../../eventmie-pro/resources/js/events_manage/components/Seo.vue","../../../eventmie-pro/resources/js/events_manage/index.js"],"sourcesContent":["import Vue from 'vue'\n\nexport const events = new Vue({\n  name: 'vue-confirm-dialog'\n})\n","<template>\n  <transition name=\"fade\">\n    <div\n      v-if=\"isShow\"\n      @click=\"handleClickOverlay\"\n      class=\"vc-overlay\"\n      id=\"vueConfirm\"\n    >\n      <transition name=\"zoom\">\n        <div v-if=\"isShow\" ref=\"vueConfirmDialog\" class=\"vc-container\">\n          <span class=\"vc-text-grid\">\n            <h4 v-if=\"dialog.title\" class=\"vc-title\" v-html=\"dialog.title\"></h4>\n            <p v-if=\"dialog.message\" class=\"vc-text\" v-html=\"dialog.message\"></p>\n            <span v-if=\"dialog.auth\">\n              <input\n                v-focus\n                v-model=\"password\"\n                @keyup.13=\"e => handleClickButton(e, true)\"\n                class=\"vc-input\"\n                type=\"password\"\n                name=\"vc-password\"\n                placeholder=\"Password\"\n                autocomplete=\"off\"\n              />\n            </span>\n          </span>\n          <div\n            class=\"vc-btn-grid\"\n            :class=\"{ isMono: !dialog.button.no || !dialog.button.yes }\"\n          >\n            <button\n              v-if=\"dialog.button.no\"\n              @click.stop=\"e => handleClickButton(e, false)\"\n              class=\"vc-btn left\"\n              type=\"button\"\n            >\n              {{ dialog.button.no }}\n            </button>\n\n            <button\n              v-if=\"dialog.button.yes\"\n              :disabled=\"dialog.auth ? !password : false\"\n              @click.stop=\"e => handleClickButton(e, true)\"\n              class=\"vc-btn\"\n              type=\"button\"\n            >\n              {{ dialog.button.yes }}\n            </button>\n          </div>\n        </div>\n      </transition>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { events } from './events'\n\nVue.directive('focus', {\n  inserted: function(el) {\n    el.focus()\n  }\n})\n\nconst Component = {\n  name: 'VueConfirmDialog',\n  data() {\n    return {\n      isShow: false,\n      password: null,\n      dialog: {\n        auth: false,\n        title: '',\n        message: '',\n        button: {}\n      },\n      params: {}\n    }\n  },\n  methods: {\n    resetState() {\n      this.password = null\n      this.dialog = {\n        auth: false,\n        title: '',\n        message: '',\n        button: {},\n        callback: () => {}\n      }\n    },\n    handleClickButton({ target }, confirm) {\n      if (target.id == 'vueConfirm') return\n      if (confirm && this.dialog.auth && !this.password) return\n      this.isShow = false\n      // callback\n      if (this.params.callback) {\n        this.params.callback(confirm, this.password)\n      }\n    },\n    handleClickOverlay({ target }) {\n      if (target.id == 'vueConfirm') {\n        this.isShow = false\n        // callback\n        if (this.params.callback) {\n          this.params.callback(false, this.password)\n        }\n      }\n    },\n    handleKeyUp({ keyCode }) {\n      if (keyCode == 27) {\n        this.handleClickOverlay({ target: { id: 'vueConfirm' } })\n      }\n      if (keyCode == 13) {\n        this.handleClickButton({ target: { id: '' } }, true)\n      }\n    },\n    open(params) {\n      this.resetState()\n      this.params = params\n      this.isShow = true\n      // set params to dialog state\n      Object.entries(params).forEach(param => {\n        if (typeof param[1] == typeof this.dialog[param[0]]) {\n          this.dialog[param[0]] = param[1]\n        }\n      })\n    }\n  },\n  mounted() {\n    if (!document) return\n    events.$on('open', this.open)\n    events.$on('close', () => {\n      this.handleClickOverlay({ target: { id: 'vueConfirm' } })\n    })\n    // document.addEventListener('keyup', this.handleKeyUp)\n  },\n  beforeDestroy() {\n    // document.removeEventListener('keyup', this.handleKeyUp)\n  }\n}\n\nexport default Component\n</script>\n\n<style>\n:root {\n  --title-color: black;\n  --message-color: black;\n  --overlay-background-color: #0000004a;\n  --container-box-shadow: #0000004a 0px 3px 8px 0px;\n  --base-background-color: #ffffff;\n  --button-color: #4083ff;\n  --button-background-color: #ffffff;\n  --button-border-color: #e0e0e0;\n  --button-background-color-disabled: #f5f5f5;\n  --button-background-color-hover: #f5f5f5;\n  --button-box-shadow-active: inset 0 2px 0px 0px #00000014;\n  --input-background-color: #ebebeb;\n  --input-background-color-hover: #dfdfdf;\n  --font-size-m: 16px;\n  --font-size-s: 14px;\n  --font-weight-black: 900;\n  --font-weight-bold: 700;\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --font-weight-light: 300;\n}\n\n/**\n* Dialog\n*/\n\n.vc-overlay *,\n.vc-overlay *:before,\n.vc-overlay *:after {\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  text-decoration: none;\n  -webkit-touch-callout: none;\n  -moz-osx-font-smoothing: grayscale;\n  margin: 0;\n  padding: 0;\n}\n\n.vc-title {\n  color: var(--title-color);\n  padding: 0 1rem;\n  width: 100%;\n  font-weight: var(--font-weight-black);\n  text-align: center;\n  font-size: var(--font-size-m);\n  line-height: initial;\n  margin-bottom: 5px;\n}\n.vc-text {\n  color: var(--message-color);\n  padding: 0 1rem;\n  width: 100%;\n  font-weight: var(--font-weight-medium);\n  text-align: center;\n  font-size: var(--font-size-s);\n  line-height: initial;\n}\n.vc-overlay {\n  background-color: var(--overlay-background-color);\n  width: 100%;\n  height: 100%;\n  transition: all 0.1s ease-in;\n  left: 0;\n  top: 0;\n  z-index: 999999999999;\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-content: baseline;\n}\n.vc-container {\n  background-color: var(--base-background-color);\n  border-radius: 1rem;\n  width: 286px;\n  height: auto;\n  display: grid;\n  grid-template-rows: 1fr max-content;\n  box-shadow: var(--container-box-shadow);\n}\n.vc-text-grid {\n  padding: 1rem;\n}\n.vc-btn-grid {\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  border-radius: 0 0 1rem 1rem;\n  overflow: hidden;\n}\n.vc-btn-grid.isMono {\n  grid-template-columns: 1fr;\n}\n.vc-btn {\n  border-radius: 0 0 1rem 0;\n  color: var(--button-color);\n  background-color: var(--button-background-color);\n  border: 0;\n  font-size: 1rem;\n  border-top: 1px solid var(--button-border-color);\n  cursor: pointer;\n  font-weight: var(--font-weight-bold);\n  outline: none;\n  min-height: 50px;\n}\n.vc-btn:hover {\n  background-color: var(--button-background-color-hover);\n}\n.vc-btn:disabled {\n  background-color: var(--button-background-color-disabled);\n}\n.vc-btn:active {\n  box-shadow: var(--button-box-shadow-active);\n}\n.vc-btn.left {\n  border-radius: 0;\n  border-right: 1px solid var(--button-border-color);\n}\n.vc-input[type='password'] {\n  width: 100%;\n  outline: none;\n  border-radius: 8px;\n  height: 35px;\n  border: 0;\n  margin: 5px 0;\n  background-color: var(--input-background-color);\n  padding: 0 0.5rem;\n  font-size: var(--font-size-m);\n  transition: 0.21s ease;\n}\n.vc-input[type='password']:hover,\n.vc-input[type='password']:focus {\n  background-color: var(--input-background-color-hover);\n}\n\n/**\n* Transition\n*/\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.21s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.zoom-enter-active,\n.zoom-leave-active {\n  animation-duration: 0.21s;\n  animation-fill-mode: both;\n  animation-name: zoom;\n}\n\n.zoom-leave-active {\n  animation-direction: reverse;\n}\n\n@keyframes zoom {\n  from {\n    opacity: 0;\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale3d(1, 1, 1);\n  }\n}\n</style>\n","import VueConfirmDialog from './vue-confirm-dialog.vue'\nimport { events } from './events'\n\nexport default {\n  install(Vue, args = {}) {\n    if (this.installed) return\n\n    this.installed = true\n    this.params = args\n\n    Vue.component(args.componentName || 'vue-confirm-dialog', VueConfirmDialog)\n\n    const confirm = params => {\n      if (typeof params != 'object' || Array.isArray(params)) {\n        let caughtType = typeof params\n        if (Array.isArray(params)) caughtType = 'array'\n\n        throw new Error(\n          `Options type must be an object. Caught: ${caughtType}. Expected: object`\n        )\n      }\n\n      if (typeof params === 'object') {\n        if (\n          params.hasOwnProperty('callback') &&\n          typeof params.callback != 'function'\n        ) {\n          let callbackType = typeof params.callback\n          throw new Error(\n            `Callback type must be an function. Caught: ${callbackType}. Expected: function`\n          )\n        }\n        events.$emit('open', params)\n      }\n    }\n    confirm.close = () => {\n      events.$emit('close')\n    }\n\n    Vue.prototype.$confirm = confirm\n    Vue['$confirm'] = confirm\n  }\n}\n","<template>\n    <div>\n        <vue-confirm-dialog></vue-confirm-dialog>\n        <ul class=\"nav nav-lb-tab text-center w-space\">\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'detail' }\" class=\"nav-link\">\n                    {{ trans('em.details') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!is_publishable.detail\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'timing' }\" class=\"nav-link\">\n                    {{ trans('em.timings') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!is_publishable.timing\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'tickets' }\" class=\"nav-link\">\n                    {{ trans('em.tickets') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!is_publishable.tickets\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'location' }\" class=\"nav-link\">\n                    {{ trans('em.location') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!is_publishable.location\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'media' }\" class=\"nav-link\">\n                    {{ trans('em.media') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!is_publishable.media\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'seo' }\" class=\"nav-link\">\n                    {{ trans('em.seo') }}\n                    <i class=\"fas fa-check-circle text-success\"></i>\n                </router-link>\n            </li>\n            <li class=\"nav-item\">\n                <router-link :to=\"{ name: 'publish' }\" class=\"nav-link\">\n                    {{ trans('em.publish') }}\n                    <i class=\"fas fa-exclamation-circle text-danger\" v-if=\"!event_ck.publish\"></i>\n                    <i class=\"fas fa-check-circle text-success\" v-else></i>\n                </router-link>\n            </li>\n        </ul>\n\n    </div>\n</template>\n\n<script>\n\nimport { mapMutations } from 'vuex';\n\nexport default {\n    props: [\n        'event_id',\n        'organiser_id',\n        'is_publishable',\n        'event_ck',\n    ],\n\n    computed: {\n        currentRouteName() {\n            return this.$route.name;\n        }\n    },\n\n    \n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        updateEventId() {\n            \n            this.add({  \n                event_id        : this.event_id,\n                organiser_id    : this.organiser_id,\n            });\n        },\n\n    },  \n    mounted() {\n        this.updateEventId();\n    }\n}\n</script>","<template>\n    <div>\n        <!-- Trigger Button -->\n        <div class=\"mb-4\">\n            <button\n                type=\"button\"\n                class=\"ai-trigger-btn\"\n                @click=\"openAIModal('generate')\"\n            >\n                <div class=\"ai-btn-content\">\n                    <div class=\"ai-icon-wrapper\">\n                        <i class=\"fa-solid fa-wand-magic-sparkles\"></i>\n                    </div>\n                    <div class=\"ai-btn-text\">\n                        {{ aiResponses?.length > 0 || event_id > 0 ? trans('em.regenerate_with_ai') : trans('em.generate_with_ai') }}\n                    </div>\n                </div>\n            </button>\n        </div>\n\n        <!-- Modal -->\n        <div class=\"ai-modal-overlay\" v-if=\"showAIModal\" @click=\"closeAIModal\">\n            <div class=\"ai-modal-container\" @click.stop>\n                <div class=\"ai-modal-header\">\n                    <div class=\"ai-modal-title-section\">\n                        <div class=\"ai-title-icon\">\n                            <i class=\"fa-solid fa-wand-magic-sparkles\"></i>\n                        </div>\n                        <div class=\"ai-title-content\">\n                            <h3 class=\"ai-modal-title\">\n                                {{ aiResponses?.length > 0 || event_id > 0 ? trans('em.regenerate_with_ai') : trans('em.generate_with_ai') }}\n                            </h3>\n                            <p class=\"ai-modal-subtitle\">\n                                {{ trans('em.ai_generator_subtitle') }}\n                            </p>\n                        </div>\n                    </div>\n                    <button\n                        type=\"button\"\n                        class=\"ai-close-btn\"\n                        @click=\"closeAIModal\"\n                    >\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n\n                <div class=\"ai-modal-body bg-white\">\n                    <div v-if=\"modalMode === 'generate'\" class=\"ai-content-section\">\n                        <div class=\"ai-input-section\">\n                            <label for=\"aiPrompt\" class=\"ai-input-label\">\n                                <i class=\"fas fa-lightbulb ai-label-icon\"></i>\n                                {{ trans('em.describe_your_event') }}\n                            </label>\n                            <div class=\"ai-textarea-wrapper\">\n                                <textarea\n                                    id=\"aiPrompt\"\n                                    class=\"ai-textarea\"\n                                    v-model=\"aiPrompt\"\n                                    rows=\"10\"\n                                    :placeholder=\"trans('em.ai_prompt_placeholder')\"\n                                ></textarea>\n                                <div class=\"ai-textarea-footer\">\n                                    <div class=\"ai-char-count\">\n                                        {{ aiPrompt.length }} {{ trans('em.characters') }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"ai-controls\">\n                                <div class=\"ai-voice-section\">\n                                    <button\n                                        class=\"ai-voice-btn\"\n                                        :class=\"{ 'ai-voice-active': isListening }\"\n                                        @click=\"toggleSpeechRecognition\"\n                                        :disabled=\"!isSpeechSupported\"\n                                    >\n                                        <i class=\"fas\" :class=\"isListening ? 'fa-stop' : 'fa-microphone'\"></i>\n                                        <div>{{ isListening ? trans('em.stop') : trans('em.voice_input') }}</div>\n                                    </button>\n                                    <div v-if=\"isListening && speechStartTime\" class=\"ai-voice-timer\">\n                                        <div class=\"ai-timer-dot\"></div>\n                                        {{ timerDisplay }}s\n                                    </div>\n                                </div>\n                                \n                                <button\n                                    class=\"ai-clear-btn\"\n                                    @click=\"clearPrompt\"\n                                    :disabled=\"!aiPrompt\"\n                                >\n                                    <i class=\"fas fa-eraser\"></i>\n                                    {{ trans('em.clear') }}\n                                </button>\n                            </div>\n\n                            <div v-if=\"!isSpeechSupported\" class=\"ai-warning\">\n                                <i class=\"fas fa-exclamation-triangle\"></i>\n                                {{ trans('em.voice_not_supported') }}\n                            </div>\n                        </div>\n\n                        <div class=\"ai-generate-section\">\n                            <button\n                                class=\"ai-generate-btn\"\n                                @click=\"generateAIContent\"\n                                :disabled=\"generating || !aiPrompt.trim()\"\n                            >\n                                <div class=\"ai-generate-content\">\n                                    <div v-if=\"generating\" class=\"ai-loading-spinner\">\n                                        <div class=\"ai-spinner\"></div>\n                                    </div>\n                                    <i v-else class=\"fa-solid fa-wand-magic-sparkles\"></i>\n                                    <div>{{ generating ? trans('em.generating') : trans('em.generate_event_content') }}</div>\n                                </div>\n                            </button>\n                            <p class=\"ai-generate-hint\">\n                                {{ trans('em.ai_generate_hint') }}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n\n    props: [\"event_id\"],\n    \n    data() {\n        return {\n            showAIModal: false,\n            modalMode: 'generate',\n            aiPrompt: '',\n            aiResponses: [],\n            generating: false,\n            aiFields: [\n                { value: 'name', label: 'Title', formField: 'title' },\n                { value: 'slug', label: 'Slug URL', formField: 'slug' },\n                { value: 'short_description', label: 'Short Description', formField: 'excerpt' },\n                { value: 'long_description', label: 'Full Description', formField: 'description' },\n                { value: 'faq', label: 'Frequently Asked Questions', formField: 'faq' },\n                { value: 'meta_title', label: 'SEO Title', formField: 'meta_title' },\n                { value: 'meta_description', label: 'SEO Description', formField: 'meta_description' },\n                { value: 'meta_tags', label: 'SEO Keywords', formField: 'meta_keywords' },\n            ],\n            aiSelectedFields: [],\n            isSpeechSupported: false,\n            isListening: false,\n            recognition: null,\n            speechStartTime: null,\n            timerInterval: null,\n            timerSeconds: 0,\n            transcriptTemp: '',\n            finalTranscript: '',\n        };\n    },\n\n    mixins:[\n        mixinsFilters\n    ],\n    computed: {\n        timerDisplay() {\n            return this.timerSeconds;\n        },\n    },\n    methods: {\n        openAIModal(mode) {\n            this.modalMode = mode;\n            this.showAIModal = true;\n            this.aiPrompt = '';\n            this.aiSelectedFields = this.aiFields.map(f => f.value);\n            this.loadAIResponses();\n        },\n        closeAIModal() {\n            this.showAIModal = false;\n            if (this.isListening) {\n                this.recognition.stop();\n                this.cleanupMic();\n            }\n        },\n        toggleSpeechRecognition() {\n            if (!this.isSpeechSupported) return;\n\n            if (this.isListening) {\n                this.recognition.stop();\n                this.cleanupMic();\n            } else {\n                this.finalTranscript = '';\n                this.aiPrompt = '';\n                this.transcriptTemp = '';\n                this.recognition.start();\n                this.isListening = true;\n                this.speechStartTime = new Date();\n                this.timerSeconds = 0;\n                this.timerInterval = setInterval(() => {\n                    this.timerSeconds = Math.floor((new Date() - this.speechStartTime) / 1000);\n                }, 1000);\n            }\n        },\n        cleanupMic() {\n            this.isListening = false;\n            clearInterval(this.timerInterval);\n            this.timerInterval = null;\n            this.speechStartTime = null;\n            this.timerSeconds = 0;\n        },\n        clearPrompt() {\n            this.aiPrompt = '';\n        },\n        generateAIContent() {\n            if (!this.aiPrompt || this.aiSelectedFields.length === 0) {\n                this.showNotification('error', trans('em.provide_prompt_and_fields'));\n                return;\n            }\n\n            this.generating = true;\n            \n                // prepare form data for post request\n                let post_url = route('eventmie.openai.handle-prompt');\n                let post_data = {\n                    prompt: this.aiPrompt,\n                    fields: this.aiSelectedFields,\n                };\n                \n                // axios post request\n                axios.post(post_url, post_data)\n                .then(response => {\n                    const events = response.data.response?.events || [];\n\n                    this.aiResponses = {\n                        prompt: this.aiPrompt,\n                        timestamp: new Date().toLocaleString(),\n                        events,\n                    };\n                    localStorage.setItem('aiEventResponses', JSON.stringify(this.aiResponses));\n\n                    if (events.length > 0) {\n                        const firstEvent = events[0];\n                        this.aiFields.forEach(field => {\n                            if (firstEvent[field.value]) {\n                                this.$set(this.$parent, field.formField, firstEvent[field.value]);\n                            }\n                        });\n                        this.$parent.isDirty?.();\n                    }\n                    this.closeAIModal();\n                    this.generating = false;\n                })\n                .catch(error => {\n                    let serrors = Vue.helpers.axiosErrors(error);\n                    if (serrors.length) {\n                        this.serverValidate(serrors);\n                    }\n                    this.generating = false;\n                    console.error('axios catch error', error);\n                });\n            \n        },\n        loadAIResponses() {\n            const stored = localStorage.getItem('aiEventResponses');\n            this.aiResponses = stored ? JSON.parse(stored) : [];\n        },\n    },\n    mounted() {\n        if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n            this.isSpeechSupported = true;\n            this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n            this.recognition.lang = 'en-US';\n            this.recognition.interimResults = true;\n            this.recognition.continuous = true;\n\n            this.recognition.onresult = (event) => {\n                let interimTranscript = '';\n                for (let i = event.resultIndex; i < event.results.length; i++) {\n                    const transcript = event.results[i][0].transcript;\n                    if (event.results[i].isFinal) {\n                        this.finalTranscript += transcript + ' ';\n                    } else {\n                        interimTranscript += transcript;\n                    }\n                }\n                this.aiPrompt = this.finalTranscript + interimTranscript;\n            };\n\n            this.recognition.onerror = (event) => {\n                console.error('Speech recognition error:', event.error);\n                this.cleanupMic();\n            };\n\n            this.recognition.onend = () => {\n                this.isListening = false;\n                clearInterval(this.timerInterval);\n                this.timerInterval = null;\n                this.speechStartTime = null;\n                this.timerSeconds = 0;\n            };\n        }\n    },\n};\n</script>\n","<template>\n    <div>\n        <AISuggetion :event_id=\"event_id\" v-if=\"openai_api_key != null && openai_api_key != ''\"></AISuggetion>\n        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\" class=\"lgx-contactform\">\n            <input type=\"hidden\" name=\"event_id\" v-model=\"event_id\">\n            \n            <input type=\"hidden\" name=\"organiser_id\" v-model=\"organiser_ids\" v-validate=\"(is_admin ? 'required' : '')\" >\n\n            <!-- it is display in create case and when organiser_id is null -->\n            <div class=\"mb-3\" v-if=\"organisers.length > 0\">\n                <label class=\"form-label\">  {{ trans('em.organiser') }}</label>\n                <div v-if=\"!organiser_id\">\n                    <v-select \n                        label=\"name\" \n                        class=\"style-chooser\" \n                        :placeholder=\"trans('em.search_organiser')+' '+trans('em.email')+'/'+trans('em.name')\"\n                        v-model=\"organizer\" \n                        :required=\"!organizer\" \n                        :filterable=\"false\" \n                        :options=\"options\" \n                        @search=\"onSearch\" \n                        @change=\"isDirty()\"\n                    ><div slot=\"no-options\">{{ trans('em.organiser_not_found') }} </div></v-select>\n                </div>\n\n                    <!-- it is display in edit case and when organiser_id is   -->\n                <input v-if=\"organiser_id\" readonly type=\"text\"  class=\"form-control\" :value=\"organizer.name+'  ( '+organizer.email+' )'\">\n                    \n                <span v-show=\"errors.has('organiser_id')\" class=\"help text-danger\">{{ errors.first('organiser_id') }}</span>\n                \n            </div>\n            \n            <!-- Only show this to admin -->\n            <div v-if=\"organisers.length <= 0 && Object.keys(event).length <= 0 && is_admin\">\n                <div class=\"alert alert-danger\">{{ trans('em.add_organiser') }} </div>\n            </div>\n\n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.select_category') }}</label>\n                <select name=\"category_id\" class=\"form-control\" v-model=\"category_id\" v-validate=\"'required|decimal|is_not:0'\" @change=\"isDirty()\">\n                    <option value=\"0\">-- {{ trans('em.category') }} --</option>\n                    <option v-for=\"(category, index) in categories\" :key = \"index\" :value=\"category.id\">{{category.name}}</option>\n                </select>\n                <span v-show=\"errors.has('category_id')\" class=\"help text-danger\">{{ errors.first('category_id') }}</span>    \n            </div>\n            \n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.event_name') }}</label>\n                <input type=\"text\" class=\"form-control\"  name=\"title\" v-model=\"title\" v-validate=\"'required'\" @change=\"isDirty()\">\n                <span v-show=\"errors.has('title')\" class=\"help text-danger\">{{ errors.first('title') }}</span>\n            </div>\n\n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.event_url') }}</label>\n                <input type=\"hidden\" name=\"slug\" v-model=\"slug\" v-validate=\"'required'\" @change=\"isDirty()\">\n                <p><a target=\"_blank\" :href=\"slugUrl()\">{{ slugUrl() }}</a></p>\n            </div>\n\n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.excerpt') }} ({{ trans('em.short_info') }})</label>\n                <input type=\"text\" class=\"form-control\"  name=\"excerpt\" v-model=\"excerpt\" v-validate=\"'required'\" @change=\"isDirty()\">\n                <span v-show=\"errors.has('excerpt')\" class=\"help text-danger\">{{ errors.first('excerpt') }}</span>\n            </div>\n\n            <div class=\"mb-3 text-wrap\">\n                <label class=\"form-label\">{{ trans('em.description') }}</label>\n                <textarea class=\"form-control\"  rows=\"3\" name=\"description\" :value=\"description\" v-validate=\"'required'\" style=\"display:none;\"></textarea>\n                <vue-editor\n                    v-model=\"description\"\n                    useCustomImageHandler\n                    @image-added=\"(file, Editor, cursorLocation, resetUploader) => handleImageAdded(file, Editor, cursorLocation, resetUploader, 'description')\"\n                ></vue-editor>\n                <span v-show=\"errors.has('description')\" class=\"help text-danger\">{{ errors.first('description') }}</span>\n            </div>\n\n            <div class=\"mb-3 text-wrap\">\n                <label class=\"form-label\">{{ trans('em.more_event_info') }} </label>\n                <textarea class=\"form-control\" rows=\"3\" name=\"faq\" :value=\"faq\" style=\"display:none;\"></textarea>\n                <vue-editor\n                    v-model=\"faq\"\n                    useCustomImageHandler\n                    @image-added=\"(file, Editor, cursorLocation, resetUploader) => handleImageAdded(file, Editor, cursorLocation, resetUploader, 'faq')\"\n                ></vue-editor>\n                <span v-show=\"errors.has('faq')\" class=\"help text-danger\">{{ errors.first('faq') }}</span>\n            </div>\n\n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.offline_payment_info') }} </label>\n                <textarea class=\"form-control\"  rows=\"3\" name=\"offline_payment_info\" v-model=\"offline_payment_info\" ></textarea>\n                <p>{{ trans('em.offline_payment_info_ie') }}</p>\n            </div>\n\n            <ul class=\"list-group list-group-flush mb-4\">\n                <li class=\"list-group-item d-flex justify-content-between px-0\" v-if=\"is_admin\">\n                    <div>\n                        <h5 class=\"mb-0\">{{ trans('em.event_featured') }}</h5>\n                        <span class=\"small text-muted text-wrap\">{{ trans('em.event_featured_ie') }}</span>\n                    </div>\n                    <div>\n                        <div class=\"form-check form-switch\">\n                            <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"featured\" name=\"featured\" v-model=\"featured\" :value=\"1\" @change=\"isDirty()\">\n                            <label class=\"form-check-label\" for=\"featured\"></label>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item d-flex justify-content-between px-0\" v-if=\"is_admin\">\n                    <div>\n                        <h5 class=\"mb-0\">{{ trans('em.event_status') }}</h5>\n                        <span class=\"small text-muted text-wrap\">{{ trans('em.event_status_ie') }}</span>\n                    </div>\n                    <div>\n                        <div class=\"form-check form-switch\">\n                            <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"status\" name=\"status\" v-model=\"status\" :value=\"1\" @change=\"isDirty()\">\n                            <label class=\"form-check-label\" for=\"status\"></label>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item d-flex justify-content-between px-0\">\n                    <div>\n                        <h5 class=\"mb-0\">{{ trans('em.scan_on_event_day_only') }}</h5>\n                        <span class=\"small text-muted text-wrap\">{{ trans('em.scan_on_event_day_only_ie') }}</span>\n                    </div>\n                    <div>\n                        <div class=\"form-check form-switch\">\n                            <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"scan_on_event_day_only\" name=\"scan_on_event_day_only\" v-model=\"scan_on_event_day_only\" :value=\"1\" @change=\"isDirty()\">\n                            <label class=\"form-check-label\" for=\"scan_on_event_day_only\"></label>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n            \n            <button type=\"submit\" class=\"btn btn-primary btn-lg mt-2\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n        </form>                \n        \n    </div>\n</template>\n\n<script>\n\nimport _ from 'lodash';\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\nimport AISuggetion from \"./AISuggetion.vue\";\n\nexport default {\n    props: [\n        'organisers', 'is_admin', 'event_ck', 'selected_organiser'\n    ],\n\n    components : {\n        AISuggetion\n    },\n    \n    mixins:[\n        mixinsFilters\n    ],\n\n    data() {\n        return {\n\n            title           : null,\n            excerpt         : null,\n            organiser_ids   : null,\n            categories      : [],\n            description     : this.event_ck.description,\n            faq             : this.event_ck.faq,\n            category_id     : 0,\n            featured        : 0,\n            status          : 0,\n            scan_on_event_day_only : 0,\n\n            // organizers options\n            options         : this.organisers,\n            //selected organizer\n            organizer       : this.selected_organiser,\n            offline_payment_info :  null,\n\n            // AI Event Generator\n            openai_api_key : is_openai_api_key\n        }\n    },\n\n    computed: {\n        // get global variables\n        ...mapState( ['event_id', 'organiser_id', 'event', 'is_dirty']),\n        \n        slug: function() {\n            if(this.title != null)\n            {\n                var slug = this.sanitizeTitle(this.title);\n                return slug;\n            }\n        }\n    },\n\n    methods: {\n\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        editEvent( editor ) {\n            \n            if(Object.keys(this.event).length > 0)\n            {\n                this.title          = this.event.title;\n                this.excerpt        = this.event.excerpt;\n                this.category_id    = this.event.category_id;\n                this.organiser_ids  = this.organiser_id ;\n                this.featured       = this.event.featured > 0 ? 1 : 0; \n                this.status         = this.event.status > 0 ? 1 : 0;\n                this.scan_on_event_day_only = this.event.scan_on_event_day_only > 0 ? 1 : 0;\n                this.offline_payment_info = this.event.offline_payment_info\n            }    \n            \n            \n        },\n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n            // prepare form data for post request\n            let post_url = route('eventmie.myevents_store');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                // on success\n                // use vuex to update global sponsors array\n                if(res.data.status)\n                {\n                    // fill data to global sponsors array\n                    this.add({  \n                        event_id        : res.data.id,\n                        organiser_id    : res.data.organiser_id , \n                    });\n                    this.showNotification('success', trans('em.event_save_success'));\n                    \n                    if(res.data.slug)\n                    {   \n                        //create case redirect with slug\n                        setTimeout(function() {\n                            window.location = route('eventmie.myevents_form',[res.data.slug]);\n                        }, 1000);\n                    }\n                }    \n\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        getCategories(){\n            let post_url = route('eventmie.myevents_categories');\n            \n            // axios post request\n            axios.get(post_url)\n            .then(res => {\n                \n                if(res.data.status)\n                {\n                    this.categories = res.data.categories;\n                }\n                \n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        // slug route\n        slugUrl(){\n            if(this.slug != null)\n                return route('eventmie.events_index')+'/'+this.slug;\n\n            return '';\n        },\n\n        // get organizers\n\n        getOrganizers(loading, search = null){\n            var postUrl     = route('eventmie.get_organizers');\n            var _this       = this;\n            axios.post(postUrl,{\n                'search' :search,\n            }).then(res => {\n                \n                var promise = new Promise(function(resolve, reject) { \n                    _this.options = res.data.organizers;\n                    resolve(true);\n                }) \n                \n                promise \n                    .then(function(successMessage) { \n                        loading(false);\n                    }, function(errorMessage) { \n                    //error handler function is invoked \n                        console.log(errorMessage); \n                    }) \n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n        \n        // v-select methods\n        onSearch(search, loading) {\n            loading(true);\n            this.search(loading, search, this);\n        },\n\n        // v-select methods\n        search: _.debounce((loading, search, vm) => {\n            \n            if(search.length > 0)\n                vm.getOrganizers(loading, search);\n            else\n                loading(false);    \n            \n        }, 350),\n\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n\n        handleImageAdded: function (file, Editor, cursorLocation, resetUploader, field) {\n            if (!file || !file.type.startsWith(\"image/\")) {\n                this.showNotification(\"error\", \"Invalid file type. Please upload an image.\");\n                resetUploader();\n                return;\n            }\n\n            let post_url = route('eventmie.myevents_detail_media'); // Same endpoint for all images\n            let formData = new FormData();\n            formData.append(\"image\", file);\n            formData.append(\"field\", field); // Pass the field parameter\n\n            axios.post(post_url, formData)\n                .then(result => {\n                    if (result.data && result.data.url) {\n                        const url = result.data.url;\n                        Editor.insertEmbed(cursorLocation, \"image\", url);\n\n                    } else {\n                        this.showNotification(\"error\", \"Image upload failed. Please try again.\");\n                    }\n                    resetUploader();\n                })\n                .catch(err => {\n                    console.error(err);\n                    this.showNotification(\"error\", \"An error occurred during the upload.\");\n                });\n        }\n\n\n    },\n\n    mounted(){\n        \n        this.isDirtyReset();\n        if(this.categories.length == 0)\n            this.getCategories();\n        \n        if(this.event_id) {\n            var $this = this;\n            \n            this.getMyEvent().then(function (response){\n                $this.editEvent();  \n            });\n            \n        };\n    },\n\n    watch: {\n        // active when organizer search \n        organizer: function () {\n            this.organiser_ids = this.organizer != null ?  this.organizer.id : null;\n        },\n    }\n\n    \n}\n</script>","<template>\n    <div class=\"tab-pane active\">\n        <div class=\"panel-group\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <form ref=\"form\" @submit.prevent=\"cropThumbnailPoster\" method=\"POST\" enctype=\"multipart/form-data\">\n                        <input type=\"hidden\" name=\"event_id\" v-model=\"event_id\">\n                        <input type=\"hidden\" name=\"organiser_id\" v-model=\"organiser_id\">\n                        <input type=\"hidden\" v-model=\"thumbnail\" name=\"thumbnail\">\n                        \n                        <div class=\"row mb-3\">\n                            <div class=\"col-md-12\">\n                                <label class=\"form-label mb-0\">{{ trans('em.thumbnail_image') }}</label>\n\n                                <p class=\"mb-2 mt-0\"><small class=\"text-muted\">{{ trans('em.zoom_info') }} {{ trans('em.drag_info') }}</small></p>\n                                <croppa v-model=\"thumbnail_croppa\"\n                                    :placeholder=\"trans('em.drag_drop')+' '+trans('em.or')+' '+trans('em.browse')+' '+trans('em.thumbnail')\"\n                                    :placeholder-font-size=\"16\"\n                                    :placeholder-color=\"'#000'\"\n                                    :class=\"'croppa-thumbnail '\"\n                                    :quality=\"2\"\n                                    :width=\"256\"\n                                    :height=\"256\"\n\n                                    :prevent-white-space=\"true\"\n                                    :show-remove-button=\"true\"\n                                    :zoom-speed=\"1\"\n                                    :file-size-limit=\"10485760\" \n                                    accept=\".jpg,.jpeg,.png\"\n                                    @file-type-mismatch=\"onFileTypeMismatch\"\n                                    @file-size-exceed=\"onFileSizeExceed\"\n                                    \n                                    :initial-image=\"thumbnail_preview\"\n\n                                    @file-choose=\"isDirty()\"\n                                >\n                                    <img crossOrigin=\"anonymous\" :src=\"thumbnail_preview\" slot=\"initial\" :class=\"'p-2'\">\n                                </croppa>\n                                <span v-show=\"errors.has('thumbnail')\" class=\"help-block text-danger\">{{ errors.first('thumbnail') }}</span>\n\n                                <p class=\"mb-0 text-muted\">{{ trans('em.thumbnail_info') }}</p>\n                            </div>\n                        </div>\n\n                        <div class=\"mb-3\">\n                            <label class=\"form-label\">{{ trans('em.images_gallery') }}</label>\n                            <div class=\"col-md-12 mb-3\">\n                                <input multiple=\"multiple\" type=\"file\" class=\"form-control\" ref=\"images\" name=\"images[]\" @change=\"isDirty()\">\n                                <span class=\"text-muted\">{{ trans('em.gallery_info') }}</span>\n                                <span v-show=\"errors.has('images')\" class=\"help text-danger\">{{ errors.first('images') }}</span>\n                            </div>\n                            <div class=\"w-100\">\n                                <div class=\"row\" v-if=\"multiple_images.length > 0\">\n                                    <div class=\"col-md-2\"\n                                        v-for=\"(image,index) in multiple_images\" \n                                        :key=\"index\">\n                                        \n                                        <button type=\"button\" class=\"btn-sm btn-remove-image bg-light-danger text-danger\" @click=\"deleteGalleryImages(image)\">\n                                            <i class=\"fas fa-times\"></i>\n                                        </button>\n                                        <img :src=\"getImageUrl(image)\" class=\"rounded img-fluid\" >\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"mb-3\">\n                            <label class=\"form-label\">YouTube {{ trans('em.video_url') }} ({{ trans('em.optional') }})</label>\n                            <div class=\"col-md-12\">\n                                <input type=\"text\" class=\"form-control\" name=\"video_link\" placeholder=\"e.g https://www.youtube.com/watch?v=id\"  v-model=\"video_link\" @change=\"isDirty()\">\n                                <span class=\"text-muted\">{{ trans('em.enter_video_id_only') }}</span>\n                            </div>\n                        </div> \n                    \n                        <div class=\"mb-3\">\n                            <div class=\"col-sm-12\">\n                                <button type=\"submit\" class=\"btn btn-primary btn-lg\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                            </div>\n                        </div>\n                        \n                    </form>\n                </div>\n            </div>\n        </div> \n    </div>\n</template>\n\n<script>\nimport { mapState, mapMutations} from 'vuex';\n\nimport mixinsFilters from '../../mixins.js';\n\n\nexport default {\n\n    mixins:[\n        mixinsFilters\n    ],\n    data() {\n        return {\n            // thumbnail\n            thumbnail           : null,\n            thumbnail_preview   : '',\n            thumbnail_croppa    : null,\n\n            images              : [],\n            multiple_images     : [],\n            video_link          : null,\n        }\n    },\n\n    computed: {\n        // get global variables\n        ...mapState( ['event_id', 'organiser_id', 'event']),\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // ======================CROPPER METHODS==================\n        // cropper validation error\n        onFileTypeMismatch (file) {\n            Vue.helpers.showToast('error', trans('em.invalid_file'));\n        },\n        onFileSizeExceed (file) {\n            Vue.helpers.showToast('error', trans('em.max_file')+' 10MB');\n        },\n        // ======================CROPPER METHODS==================\n\n        \n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        async cropThumbnailPoster() {\n            // first crop images\n            if(this.thumbnail_croppa === null) {\n                Vue.helpers.showToast('error', trans('em.thumbnail')+' '+trans('em.image')+' '+trans('em.required'));\n                return false;\n            }\n            \n            this.thumbnail  = await this.thumbnail_croppa.generateDataUrl('image/jpeg');\n            \n            // once after we get cropped images\n            // proceed to form submit\n            this.validateForm();\n        },\n\n        // submit form\n        formSubmit(event) {\n\n            // crop thumbnail\n\n            // prepare form data for post request\n            let post_url = route('eventmie.myevents_store_media');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                // on success\n                // use vuex to update global sponsors array\n                if(res.data.status)\n                {\n                    // res.data.data\n                    this.images  = res.data.images;\n                    this.multiple_images = this.images.images ? JSON.parse(this.images.images) : [];\n                    this.showNotification('success', trans('em.event_save_success'));\n                    // reload page   \n                    setTimeout(function() {\n                        location.reload(true);\n                    }, 1000);\n                }    \n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        // set default value in case of edit\n        editMedia(){\n            \n            if(Object.keys(this.event).length > 0)\n            {\n                this.thumbnail_preview         = this.getImageUrl(this.event.thumbnail);\n                this.video_link                = this.event.video_link;\n                this.multiple_images           = this.event.images ? JSON.parse(this.event.images) : [];\n            }    \n        },\n\n        //delete \n        deleteGalleryImages(image = null){\n               this.showConfirm(trans('em.delete')).then((res) => {\n                if(res) {\n                    // prepare form data for post request\n                    let post_url = route('eventmie.delete_image');\n                    let post_data = {\n                        'event_id' : this.event.id,\n                        'image'    : image,\n                        'organiser_id'     : this.organiser_id\n                    };\n                    \n                    // axios post request\n                    axios.post(post_url, post_data)\n                    .then(res => {\n                        // on success\n                        // use vuex to update global sponsors array\n                        if(res.data.status)\n                        {\n                            this.images           = res.data.images;\n                            \n                            this.multiple_images  = this.images.images ? JSON.parse(this.images.images) : [];\n\n                            this.showNotification('success', trans('em.event_save_success'));\n                        }    \n                    })\n                    .catch(error => {\n                        let serrors = Vue.helpers.axiosErrors(error);\n                        if (serrors.length) {\n                            this.serverValidate(serrors);\n                        }\n                    });\n                }\n            })\n\n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n        \n    },\n    mounted(){\n        this.isDirtyReset();\n        // if user have no event_id then redirect to details page\n        // if user have no event_id then redirect to details page\n        let event_step  = this.eventStep();\n        // Vue.component('croppa', Croppa.component);  \n        if(event_step)\n        {\n            // just to show images in case of edit\n            var $this = this;\n            this.getMyEvent().then(function (response){\n                $this.editMedia();\n            });\n        }    \n    }  \n    \n}\n</script>","<template>\n    <div class=\"tab-pane active\">\n        <div class=\"panel-group\">\n            <div class=\"panel panel-default lgx-panel\">\n                <div class=\"panel-heading\">\n                    <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\" class=\"lgx-contactform\">\n                        <input type=\"hidden\" name=\"event_id\" v-model=\"event_id\">\n                        <input type=\"hidden\" name=\"organiser_id\" v-model=\"organiser_id\">\n\n                        <div class=\"d-flex justify-content-between px-0 mb-3\">\n                            <div>\n                                <h5 class=\"mb-0\">{{ trans('em.online_event') }}</h5>\n                                <span class=\"small text-muted text-wrap\">{{ trans('em.event_online_ie') }}</span>\n                            </div>\n                            <div>\n                                <div class=\"form-check form-switch\">\n                                    <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"online_event\" name=\"online_event\" v-model=\"online_event\" :value=\"1\" @change=\"isDirty()\">\n                                    <label class=\"form-check-label\" for=\"online_event\"></label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"mb-3 text-wrap\" v-if=\"online_event > 0\">\n                            <label class=\"form-label\" for=\"online_location\">{{ trans('em.online_location') }}</label>\n                            <textarea class=\"form-control\"  rows=\"3\" name=\"online_location\" :value=\"online_location\" style=\"display:none;\"></textarea>\n                            <vue-editor\n                                v-model=\"online_location\"\n                                useCustomImageHandler\n                                @image-added=\"(file, Editor, cursorLocation, resetUploader) => handleImageAdded(file, Editor, cursorLocation, resetUploader, 'location')\"\n                            ></vue-editor>\n                            <span v-show=\"errors.has('online_location')\" class=\"small text-wrap text-danger\">{{ errors.first('online_location') }}</span>\n                            <span class=\"small text-muted text-wrap\">{{ trans('em.online_secret') }}</span>\n                        </div>\n\n                        <div class=\"mb-3\">\n                            <label class=\"form-label\">{{ trans('em.event_venues') }} ({{ trans('em.optional') }})</label>\n                            <multiselect\n                                v-model=\"tmp_venues_ids\"\n                                :options=\"venues_options\" \n                                id=\"ajax\"\n                                label=\"text\"\n                                track-by=\"value\"\n                                :placeholder=\"'-- '+trans('em.search_venue')+' --'\" \n                                open-direction=\"bottom\"\n                                :multiple=\"false\"\n                                :searchable=\"true\"\n                                :loading=\"isLoading\"\n                                :internal-search=\"false\"\n                                :clear-on-select=\"true\"\n                                :close-on-select=\"true\"\n                                :options-limit=\"300\"\n                                :limit=\"20\"\n                                :limit-text=\"limitText\"\n                                :max-height=\"300\"\n                                :show-no-results=\"false\"\n                                :hide-selected=\"false\"\n                                @search-change=\"searchVenues\"\n                                :allow-empty=\"online_event > 0 ? true : false\"\n                                :class=\"'form-control form-control-sm px-0 py-0 border-0'\"\n                                :preserve-search=\"false\" \n                                :preselect-first=\"false\"\n                                @select=\"isDirty()\"\n                            >\n                            <template slot=\"tag\" slot-scope=\"{ option, remove }\">\n                                <span class=\"multiselect__tag\" @click=\"remove(option)\">\n                                <span >{{ option.text }}</span>\n                                    <i aria-hidden=\"true\" tabindex=\"1\" class=\"multiselect__tag-icon\">\n                                    </i>\n                                </span>\n                            </template>\n                            \n                            <span slot=\"noResult\"> {{ trans('em.venues_not_found') }}</span>\n                            </multiselect>\n                            \n                        </div>\n                        <div class=\"mb-3\">\n                            <venue-component :organiser_id=\"organiser_id\"></venue-component>\n                        </div>    \n                        \n                        <button type=\"submit\" class=\"btn btn-primary btn-lg\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\nimport VenueComponent from '../../venues_manage/components/Venue.vue';\n\n\nexport default {\n    name: \"GoogleMap\",\n\n    props: [\n        'event_prop',\n        'event_ck',\n    ],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    components: {\n        VenueComponent,\n    },\n\n    data() {\n        return {\n            venue       : null,\n            address     : null,\n            city        : null,\n            state       : null,\n            zipcode     : null,\n            countries   : [],\n            country_id  : 0,\n            latitude    : null,\n            longitude   : null,\n            online_event : 0,\n            online_location : this.event_ck.online_location,\n\n            venues             : [],\n            venues_ids         : [],\n            venues_options     : [],\n            tmp_venues_ids     : [],\n            selected_venues    : [],\n            \n\n            isLoading: false\n            \n        }\n    },\n\n    computed: {\n        // get global variables\n        ...mapState( ['event_id', 'organiser_id', 'event']),\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        get_countries(){\n            axios.get(route('eventmie.myevents_countries'))\n            .then(res => {\n                if(res.data.countries)\n                {\n                   this.countries = res.data.countries\n                }\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n      \n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n            \n            // prepare form data for post request\n            let post_url = route('eventmie.myevents_store_location');\n            let post_data = new FormData(this.$refs.form);\n\n            post_data.append('venues_ids', this.venues_ids);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                // on success\n                // use vuex to update global sponsors array\n                if(res.data.status)\n                {\n                    this.showNotification('success', trans('em.event_save_success'));\n                    // reload page   \n                    setTimeout(function() {\n                        location.reload(true);\n                    }, 1000);\n                }\n\n            })\n            .catch(error => {\n                // only in case or serverValidate\n                if (error.length) {\n                    this.serverValidate(error);\n                }\n            });\n                \n        },\n\n        //edit location\n        edit_location(){\n            \n            if(Object.keys(this.event).length > 0)\n            {\n                this.venue       =  this.event.venue;\n                this.address     =  this.event.address;\n                this.city        =  this.event.city;\n                this.state       =  this.event.state;\n                this.zipcode     =  this.event.zipcode;\n                this.country_id  =  this.event.country_id ? this.event.country_id : 0;\n                this.latitude    =  this.event.latitude;\n                this.longitude   =  this.event.longitude;\n                this.online_event = this.event.online_event;\n                this.online_location = this.event.online_location;\n            }    \n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n\n\n        // get selected venues in case of editing\n        getSelectedVenues() {\n            let $this = this;\n            axios.post(route('eventmie.selected_venues'),{\n                event_id      : this.event_id,\n                organiser_id  : this.organiser_id,\n            })\n            .then(res => {\n                // fill data to global venues array\n                this.selected_venues = res.data.selected_event_venues \n\n                \n                // set mutiple venues for multiselect list\n                if(this.selected_venues.length > 0)\n                {\n                    \n                    this.tmp_venues_ids = {value : this.selected_venues[0].id, text : this.selected_venues[0].title };\n                    \n                    // this.selected_venues.forEach(function (v, key) {\n                    //     this.tmp_venues_ids.push({value : v.id, text : v.title });\n                    // }.bind(this));\n                }    \n                \n            })\n            .catch(error => {\n                Vue.helpers.axiosErrors(error);\n            });\n        },\n\n\n        // update venues for submit\n        updateVenues(){\n            \n            console.log('update venue');\n            \n            this.venues_ids = '';\n            \n            //venues\n            console.log(this.tmp_venues_ids == null);\n            if(this.tmp_venues_ids == null) \n                return true;\n\n            if(Object.keys(this.tmp_venues_ids).length > 0)\n            {\n                // var count = this.tmp_venues_ids.length;\n                // this.tmp_venues_ids.forEach(function (value, key) {\n                //     this.venues_ids += value.value;\n\n                //     // add comma except last key\n                //     if(key < (count-1) )\n                //         this.venues_ids += ',';\n                // }.bind(this));\n                 this.venues_ids = this.tmp_venues_ids.value\n            }\n            \n        },\n\n        limitText (count) {\n            return trans('em.event')+count +trans('em.venues');\n        },\n\n        // get venues of organiser and tag searching\n        searchVenues: _.debounce(function(search) {  \n\n            this.isLoading = true\n\n            let post_url    = route('eventmie.search_venues_all');\n            \n            let post_data   = {\n                'search'     : search,\n                organiser_id : this.organiser_id, \n            };\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n\n                this.venues_options = [];\n                // fill data to global venues array\n                this.venues        = res.data.venues;\n                \n                // set mutiple venues for multiselect list\n                if(this.venues.length > 0)\n                {\n                    this.venues.forEach(function(v, key) {\n                        this.venues_options.push({value : v.id, text : v.title });\n                    }.bind(this));\n                    \n                }\n                \n                this.isLoading = false;\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        }, 1000),\n\n        clearAll () {\n            this.tmp_venues_ids = []\n        },\n\n        handleImageAdded: function (file, Editor, cursorLocation, resetUploader, field) {\n            if (!file || !file.type.startsWith(\"image/\")) {\n                this.showNotification(\"error\", \"Invalid file type. Please upload an image.\");\n                resetUploader();\n                return;\n            }\n\n            let post_url = route('eventmie.myevents_location_media'); // Same endpoint for all images\n            let formData = new FormData();\n            formData.append(\"image\", file);\n            formData.append(\"field\", field); // Pass the field parameter\n\n            axios.post(post_url, formData)\n                .then(result => {\n                    if (result.data && result.data.url) {\n                        const url = result.data.url;\n                        Editor.insertEmbed(cursorLocation, \"image\", url);\n                    } else {\n                        this.showNotification(\"error\", \"Image upload failed. Please try again.\");\n                    }\n                    resetUploader();\n                })\n                .catch(err => {\n                    console.error(err);\n                    this.showNotification(\"error\", \"An error occurred during the upload.\");\n                });\n        }\n\n\n\n    },\n\n    mounted(){\n        this.isDirtyReset();\n        // if user have no event_id then redirect to details page\n        let event_step     = this.eventStep();\n        \n        if(event_step)\n        {\n            this.get_countries();\n\n            var $this = this;\n            this.getMyEvent().then(function (response){\n                \n                $this.searchVenues(null);\n                \n                $this.getSelectedVenues();  \n\n                $this.edit_location();\n            });\n        }\n    },\n\n    watch: {\n        \n        tmp_venues_ids : function() {\n            this.updateVenues();\n        },\n    }\n\n    \n}\n</script>","<template>\n    <div class=\"schedule-row mb-3\">\n        <div class=\"row mb-2\">\n            <div class=\"col-md-12\">\n                <div class=\"badge bg-primary d-flex p-2 fs-6\">\n                    #{{sch_index+1}} &nbsp;<span>{{ moment(month, 'YYYY-MM').format('MMMM') }} {{ trans('em.schedule') }}  </span>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\" v-if=\"sch_r_type == 2 \">\n                <div class=\"form-group mb-2\">\n                    <label class=\"form-label\">{{ trans('em.repetitive_days') }}</label>\n                    <multiselect\n                        :class=\"'form-control px-0 py-0 border-0'\"\n                        v-model=\"repetitive_days\" \n                        :options=\"repetitive_days_options\" \n                        :placeholder=\"trans('em.select_days')\" \n                        label=\"text\" \n                        track-by=\"value\" \n                        :multiple=\"true\"\n                        :close-on-select=\"false\" \n                        :clear-on-select=\"false\" \n                        :hide-selected=\"false\" \n                        :preserve-search=\"true\" \n                        :preselect-first=\"schedules  ? false : true\"\n                        :allow-empty=\"true\"\n                        :disabled=\"sch_r_type == 3 || sch_r_type == 1 ? true : false \"\t\n                        @input=\"schedules ? schedules.repetitive_type = null : ''\"\n                        @select=\"isDirty()\"\n                    >\n                    </multiselect>\n                </div>\n            </div>\n        \n            <div class=\"col-md-12\" v-if=\"sch_r_type == 3 || sch_r_type == 1\">\n                <div class=\"form-group mb-2\">\n                    <label class=\"form-label\" v-if=\"sch_r_type == 3\">{{ trans('em.repetitive_dates') }} ({{ trans('em.repeats_on') }})</label>\n                    <label class=\"form-label\" v-if=\"sch_r_type == 1\">{{ trans('em.repetitive_dates') }} ({{ trans('em.repeats_except') }})</label>\n                    <multiselect\n                        :class=\"'form-control px-0 py-0 border-0'\"\n                        v-model=\"repetitive_dates\" \n                        :options=\"repetitive_dates_options\" \n                        :placeholder=\"trans('em.select_dates')\" \n                        label=\"text\" \n                        track-by=\"value\" \n                        :multiple=\"true\"\n                        :close-on-select=\"false\" \n                        :clear-on-select=\"false\" \n                        :hide-selected=\"false\" \n                        :preserve-search=\"true\" \n                        :preselect-first=\"schedules ? false : true\"\n                        :allow-empty=\"true\"\n                        :disabled=\"sch_r_type == 2  ? true : false \"\t\n                        @input=\"schedules ? schedules.repetitive_type = null : ''\"\n                        @select=\"isDirty()\"\n                    >\n                    </multiselect>\n                </div>\n            </div>\n\n            <div class=\"col-xs-12 col-sm-6 col-md-6\">\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"from_time\">{{ trans('em.start_time') }}</label><br>\n                    <date-picker \n                        class=\"form-control\"\n                        v-model=\"from_time\" \n                        type=\"time\" \n                        format=\"HH:mm\" \n                        :placeholder=\"trans('em.select_start_time')\" \n                        :lang=\"$vue2_datepicker_lang\"\n                        @change=\"isDirty()\"\n                    ></date-picker>\n                    <span v-show=\"errors.has('end_time')\" class=\"help text-danger\">{{ errors.first('from_time') }}</span> \n                </div>\n            </div>    \n\n            <div class=\"col-xs-12 col-sm-6 col-md-6\">\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"to_time\">{{ trans('em.end_time') }}</label><br>\n                    <date-picker \n                        class=\"form-control\"\n                        v-model=\"to_time\" \n                        type=\"time\" \n                        format=\"HH:mm\" \n                        :placeholder=\"trans('em.select_end_time')\" \n                        :lang=\"$vue2_datepicker_lang\"\n                        @change=\"isDirty()\"\n                    ></date-picker>\n                    <span v-show=\"errors.has('to_time')\" class=\"help text-danger\">{{ errors.first('to_time') }}</span> \n                </div>\n            </div>  \n        </div>\n\n        <div class=\"row mt-3\">\n\n            <div class=\"col-md-12\" v-if=\"sch_r_type && Object.keys(schedules).length > 0\">\n                <div class=\"alert alert-primary\">\n                    <p class=\"text-primary fw-bold\">\n                        {{ trans('em.start') }}: \n                        {{ \n\n                            (moment(months[0], 'YYYY-MM')).isSame(moment(month, 'YYYY-MM')) ? \n                            changeDateFormat(convert_date_to_local(local_start_date), \"YYYY-MM-DD\") :\n                            changeDateFormat(moment(month, 'YYYY-MM').startOf('month').format('YYYY-MM-DD hh:mm'), \"YYYY-MM-DD\") \n                        }} \n                        &nbsp;|&nbsp;\n                        {{ trans('em.end') }}: \n                        \n                        {{  \n                            (moment(months[months.length -1 ], 'YYYY-MM')).isSame(moment(month, 'YYYY-MM')) ? \n                            changeDateFormat(convert_date_to_local(local_end_date), \"YYYY-MM-DD\") :\n                            changeDateFormat(moment(month, 'YYYY-MM').endOf('month').format('YYYY-MM-DD hh:mm'), \"YYYY-MM-DD\") \n                        }} \n                    </p>\n                    <hr>\n                    <!-- In case of simple : total hours (from start date to end date) -->\n                    <p class=\"mb-0\" v-if=\"(\n                        (schedules_p != undefined ) \n                        ? (\n                        (schedules_p.from_time != null && schedules_p.to_time != null) || (from_time != 'Invalid Date' && to_time != 'Invalid Date' && \n                        from_time != null && to_time != null) \n                        ) \n                        : true\n                        )   && (from_time != 'Invalid Date' && to_time != 'Invalid Date' && \n                        from_time != null && to_time != null) \n                    \">\n                        <strong>{{ trans('em.duration') }} </strong> \n                        {{ schedule_total_days()+(schedule_total_days() > 1 ? ' '+trans('em.days') : ' '+trans('em.day'))  }}\n                        &nbsp;|&nbsp;\n                        \n                        {{ counthours(from_time, to_time, true)+(counthours(from_time, to_time, true) > 1 ? ' '+trans('em.hours') : ' '+trans('em.hour'))  }} {{ trans('em.each_day') }}\n\n                    </p>\n                    <p class=\"mb-0\" v-else>\n                        <strong>{{ trans('em.duration') }} </strong> \n                        {{  0   +' '+ trans('em.day')  }}\n                        &nbsp;|&nbsp;\n                        \n                        {{ 0  +' '+ trans('em.hour')  }} {{ trans('em.each_day') }}\n                    </p>\n                </div>\n            </div>  \n       \n            <div class=\"col-md-12\" v-if=\"Object.keys(schedules).length <= 0 && check_date(start_date) && check_date(end_date) && check_time(start_time) && check_time(end_time)\">\n                <div class=\"alert alert-primary\">\n                    <p class=\"text-primary fw-bold\">\n                        {{ trans('em.start') }}: \n                        {{\n                            (moment(months[0], 'YYYY-MM')).isSame(moment(month, 'YYYY-MM')) ? \n                            changeDateFormat(convert_date_to_local(local_start_date), \"YYYY-MM-DD\") :\n                            changeDateFormat(moment(month, 'YYYY-MM').startOf('month').format('YYYY-MM-DD hh:mm'), \"YYYY-MM-DD\") \n                        }} \n                        &nbsp;|&nbsp;\n                        {{ trans('em.end') }}                     {{ \n                            \n                            (moment(months[months.length -1 ], 'YYYY-MM')).isSame(moment(month, 'YYYY-MM')) ? \n                            changeDateFormat(convert_date_to_local(local_end_date), \"YYYY-MM-DD\") :\n                            changeDateFormat(moment(month, 'YYYY-MM').endOf('month').format('YYYY-MM-DD hh:mm'), \"YYYY-MM-DD\") \n                        }} \n                    </p>\n                    <hr>\n                    <p class=\"mb-0\" v-if=\"(\n                        (schedules_p != undefined ) \n                        ? (\n                        (schedules_p.from_time != null && schedules_p.to_time != null) || (from_time != 'Invalid Date' && to_time != 'Invalid Date' && \n                        from_time != null && to_time != null) \n                        ) \n                        : true\n                        )   && (from_time != 'Invalid Date' && to_time != 'Invalid Date' && \n                        from_time != null && to_time != null) \n                    \">\n                        <strong>{{ trans('em.duration') }} </strong> \n                        {{ schedule_total_days()+(schedule_total_days() > 1 ? ' '+trans('em.days') : ' '+trans('em.day'))  }}\n                        &nbsp;&nbsp;|&nbsp;&nbsp;\n                        {{ counthours(from_time, to_time, true)+(counthours(from_time, to_time, true) > 1 ? ' '+trans('em.hours') : ' '+trans('em.hour')) }} {{ trans('em.each_day') }}\n                    </p>\n\n                    <p class=\"mb-0\" v-else>\n                        <strong>{{ trans('em.duration') }} </strong> \n                        {{  0   +' '+ trans('em.day')  }}\n                        &nbsp;&nbsp;|&nbsp;&nbsp;\n                        \n                        {{ 0  +' '+ trans('em.hour')  }} {{ trans('em.each_day') }}\n\n                    </p>\n                </div>\n            </div>\n\n        </div>\n\n\n\n    </div>\n</template>\n\n<script>\n\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n    props: [\n        'sch_index', 'sch_r_type', 'start_time_p', 'end_time_p', 'start_date_p', 'end_date_p', 'schedules_p', 'month', 'months'\n    ],\n    \n    mixins:[\n        mixinsFilters\n    ],\n\n    computed: {\n        // get global variables\n        ...mapState( ['v_repetitive', 'v_repetitive_days', 'v_repetitive_dates', 'v_from_time', 'v_to_time', 'is_dirty']),\n    },\n\n    data() {\n        return {\n\n            // parent date and time assign to child start and end date and start and time varible becaue you can't update prop value direct\n            start_date     : this.start_date_p,\n            end_date       : this.end_date_p,\n            start_time     : this.start_time_p,\n            end_time       : this.end_time_p,\n            schedules      : this.schedules_p ? this.schedules_p : [],\n            //end\n\n            moment         : moment,\n            repetitive_days: [{value : 1, text : trans('em.sunday') }],\n            repetitive_days_options: [\n                {value : 1, text : trans('em.sunday') },\n                {value : 2, text : trans('em.monday') },\n                {value : 3, text : trans('em.tuesday') },\n                {value : 4, text : trans('em.wednesday') },\n                {value : 5, text : trans('em.thursday') },\n                {value : 6, text : trans('em.friday') },\n                {value : 7, text : trans('em.saturday') },\n                \n            ],\n\n            repetitive_dates : [{value : 1,   text : \"1\"}],\n            repetitive_dates_options : [],\n            \n            \n            from_time   : [],\n            to_time     : [],\n\n            //local timezone variable\n            local_from_time     : null,\n            local_to_time       : null,\n            local_start_date    : null,\n            local_end_date      : null,\n            local_from_date     : null,\n            local_to_date       : null,\n         }\n    },\n    methods: {\n          // update global variables\n        ...mapMutations(['add', 'update']),\n        \n        // edit schedule\n        editSchedule() {\n            let $_this      = this;\n            let schedules   = [0];\n        \n            //convert server timezone to local timezone\n            this.convert_to_local_tz();\n\n            this.start_date  = this.setDateTime(this.local_start_date);\n            this.end_date    = this.setDateTime(this.local_end_date);\n            this.from_time   = this.setDateTime(this.local_from_time); \n            this.to_time     = this.setDateTime(this.local_to_time);\n            \n            // it is already selected monthly dates\n            if(Object.keys(this.schedules).length > 0 && this.schedules.repetitive_type == 3 )\n            {\n                //empty pre select\n                this.repetitive_dates = [];\n\n                if(this.schedules.repetitive_dates == null)\n                {\n                    return this.repetitive_dates;\n                }\n\n                schedules        = JSON.parse(this.schedules.repetitive_dates.split(','));   \n            \n                if(schedules.length > 0)\n                {\n                    schedules.forEach(function (value, key) {\n                        $_this.repetitive_dates.push($_this.repetitive_dates_options[value-1]);\n                    });\n                }\n            }\n\n            // it is already selected daily dates\n            if(Object.keys(this.schedules).length > 0 && this.schedules.repetitive_type == 1 )\n            {\n                //empty pre select\n                this.repetitive_dates = [];\n\n                if(this.schedules.repetitive_dates == null)\n                {\n                    return this.repetitive_dates;\n                }\n\n                schedules        = JSON.parse(this.schedules.repetitive_dates.split(','));   \n                \n                if(schedules.length > 0)\n                {\n                    schedules.forEach(function (value, key) {\n                        $_this.repetitive_dates.push($_this.repetitive_dates_options[value-1]);\n                    });\n                }\n            }\n\n            // it is already selected weekly days\n            if(Object.keys(this.schedules).length > 0 && this.schedules.repetitive_type == 2)\n            {\n                // empty pre select\n                this.repetitive_days    = [];\n\n                if(this.schedules.repetitive_days == null)\n                {\n                    return this.repetitive_days;\n                }\n\n                schedules               = this.schedules.repetitive_days.split(',');   \n                \n                if(schedules.length > 0)\n                {\n                    schedules.forEach(function (value, key) {\n                        $_this.repetitive_days.push($_this.repetitive_days_options[value-1]);\n                    });\n                }\n            }\n        },\n        \n        // update schedule\n        updateSchedule() {\n            // Prepare post ready data\n            \n            // repetitive_days\n            var tmp_repetitive_days = '';\n            if(this.repetitive_days != null && Object.keys(this.repetitive_days).length > 0)\n            {\n                var count = this.repetitive_days.length;\n                this.repetitive_days.forEach(function (value, key) {\n                    tmp_repetitive_days += value.value.toString().length ==  1 ? '0'+value.value :  value.value;\n\n                    // add comma except last key\n                    if(key < (count-1) )\n                        tmp_repetitive_days += ',';\n                });\n            }else{\n\n                tmp_repetitive_days = null;\n            }\n\n            var tmp_repetitive_dates = '';\n            \n            \n            if(this.repetitive_dates != null && Object.keys(this.repetitive_dates).length > 0)\n            {\n                var count = this.repetitive_dates.length;\n                this.repetitive_dates.forEach(function (value, key) {\n                    tmp_repetitive_dates += value.value.toString().length ==  1 ? '0'+value.value :  value.value;\n\n                    // add comma except last key\n                    if(key < (count-1) )\n                        tmp_repetitive_dates += ',';\n                });\n            }else{\n\n                tmp_repetitive_dates = null;\n            }    \n\n\n            this.update({ \n                v_sch_index         : this.sch_index, \n                v_repetitive_days   : tmp_repetitive_days,\n                v_repetitive_dates  : tmp_repetitive_dates,\n                v_from_time         : moment(this.from_time).locale('en').format('HH:mm:ss'),\n                v_to_time           : moment(this.to_time).locale('en').format('HH:mm:ss'),\n            });\n        },\n\n        // set selected start_time and end_time in from_time and to_time\n        selectedTimes()\n        {\n            if(Object.keys(this.schedules).length <= 0)\n            {\n                this.from_time = this.start_time;\n                this.to_time   = this.end_time;\n            }\n        },\n\n        // server time convert into local timezone\n        convert_to_local_tz(){\n            this.local_start_date   = moment(this.start_date).format('YYYY-MM-DD');\n            this.local_end_date     = moment(this.end_date).format('YYYY-MM-DD');\n\n\n            this.local_from_time    = this.start_time;\n            this.local_to_time      = this.end_time;\n            this.local_from_date    = this.start_date;\n            this.local_to_date      = this.end_date;\n\n\n            if(Object.keys(this.schedules).length > 0 && this.schedules.repetitive_type != 2){\n                this.local_from_time    = Object.keys(this.schedules).length > 0 ? moment(this.schedules.from_time, 'HH:mm:ss') : this.start_time;\n                this.local_to_time      = Object.keys(this.schedules).length > 0 ? moment(this.schedules.to_time, 'HH:mm:ss')   : this.end_time;\n                this.local_from_date    = Object.keys(this.schedules).length > 0 ? this.schedules.from_date : this.start_date;\n                this.local_to_date      = Object.keys(this.schedules).length > 0 ? this.schedules.to_date   : this.end_date;\n            }\n            \n            \n            if(Object.keys(this.schedules).length > 0 && this.schedules.repetitive_type == 2){\n                    \n                this.local_from_time    = Object.keys(this.schedules).length > 0 ? this.userTimezone(this.schedules.from_date+' '+this.schedules.from_time, 'YYYY-MM-DD HH:mm:ss') : this.start_time;\n                this.local_to_time      = Object.keys(this.schedules).length > 0 ? this.userTimezone(this.schedules.to_date+' '+this.schedules.to_time, 'YYYY-MM-DD HH:mm:ss')   : this.end_time;\n            }\n            \n\n            \n            \n        },\n\n        // totoal days\n        schedule_total_days(){\n            //count days in one month\n            var  count_days       = moment(this.month, \"YYYY-MM\").locale('en').daysInMonth();\n            var  total            = 0;\n\n            \n            //===========================EVENT CREATE CASE START ==========================================    \n            // use this condition when user create event\n            // total event's dates in daily event\n            \n            if(this.sch_r_type == 1 && this.repetitive_dates.length > 0 && ( Object.keys(this.schedules).length > 0 ? !this.schedules.repetitive_type : true\n               && this.repetitive_dates != null\n            ))\n            {\n                \n                // first schedule total day because start date can start form between \n                if(this.months[0]== this.month && this.months.length != 1)\n                {\n                    \n                    total        = count_days - moment(this.local_start_date, \"YYYY-MM-DD\").locale('en').format(\"DD\")+1;\n                    let count_d  = total;\n                    \n                    this.repetitive_dates.forEach(function(v,k){\n                        // selected dates must be grather than start date\n                        if(moment(this.local_start_date, \"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                        {\n                            count_d     = count_d - 1;\n                            total       = count_d; \n                        }    \n                    }.bind(this))\n                }\n\n                // first schedule total day because end date can start form between\n                else if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                {\n                    total        = moment(this.local_end_date, \"YYYY-MM-DD\").locale('en').format(\"DD\"); \n                    let count_d  = total;  \n\n                    this.repetitive_dates.forEach(function(v,k){\n                        // selected dates must be less than end date\n                        if(moment(this.local_end_date, \"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                        {\n                            count_d     = count_d - 1;\n                            total       = count_d; \n                            \n                        }    \n                    }.bind(this))                      \n                }\n\n                // total days for only one month\n                else if(this.months.length == 1)\n                {\n                    var a = moment(this.local_start_date,\"YYYY-MM-DD\").locale('en');\n                    var b = moment(this.local_end_date,\"YYYY-MM-DD\").locale('en');\n                    \n                    total        = b.diff(a, 'days')+1; \n                    let count_d  = total;  \n\n                    this.repetitive_dates.forEach(function(v,k){\n\n                        // selected date must be less than end date and grather than start date\n                        if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD') && moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                        {\n                            count_d     = count_d - 1;\n                            total       = count_d; \n                            \n                        }    \n                        \n\n                    }.bind(this))  \n                }\n                \n                else\n                {\n                    total  = count_days - this.repetitive_dates.length; \n                }\n                \n                \n            }\n            // use this condition when user create event\n            // total event's dates in monthly event\n            if(this.sch_r_type == 3 && this.repetitive_dates.length > 0 && (Object.keys(this.schedules).length > 0 ? !this.schedules.repetitive_type : true))\n            {\n                total  = this.repetitive_dates.length; \n                \n                // first schedule total day because start date can start form between\n                if(this.months[0] == this.month && this.months.length != 1 )\n                {\n                    \n                    let count_d  = 0 ;\n                    this.repetitive_dates.forEach(function(v,k){\n                        \n                        // selected date must be grather than start date\n                        if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                            count_d = count_d + 1;\n                    }.bind(this));\n\n                    total  = count_d;\n                                             \n                }\n\n                // first schedule total day because end date can start form between\n                if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                {\n                    let count_d  = 0 ;\n                    this.repetitive_dates.forEach(function(v,k){\n                        \n                        // selected date must be less than end date\n                        if(moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                            count_d = count_d + 1;\n                    }.bind(this));\n\n                    total    = count_d;\n                       \n                }\n\n                // total days for only one month\n                if(this.months.length == 1)\n                {\n                    var a = moment(this.local_start_date,\"YYYY-MM-DD\").locale('en');\n                    var b = moment(this.local_end_date,\"YYYY-MM-DD\").locale('en');\n                    \n                    total        = b.diff(a, 'days')+1; \n                    \n                    let count_d  = 0 ;\n                    this.repetitive_dates.forEach(function(v,k){\n                        \n                        // selected date must be less than end date and grather than start date\n                        if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD') && moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                            count_d = count_d + 1;\n                    }.bind(this));\n\n                    total    = count_d;\n                    \n                       \n                }\n            }\n           \n           // use this condition when user create event\n            // total event's dates in weekly event\n            if(this.sch_r_type == 2 && this.repetitive_days.length > 0 && (Object.keys(this.schedules).length > 0 ? !this.schedules.repetitive_type : true))\n            {\n                var all_dates = [];\n                var i         = 1;\n                var $_this    = this;\n                var count     = 1;\n                total         = 0;\n                \n                while( i <= count_days)\n                {\n                    // make dates object of moment according to months and year\n                    \n                    all_dates[i] = moment(this.month+'-'+i, \"YYYY-MM-DD\").format(\"YYYY-MM-DD\");\n                    i++;\n                }\n                \n                all_dates.forEach(function(value, key){\n                    $_this.repetitive_days.forEach(function(value1, key1){\n                        \n                        if(moment(value).format('dddd') == value1.text)\n                        {\n                            // first schedule total day because start date can start form between \n                            if(this.months[0] == this.month && this.months.length != 1)\n                            {   \n                                // selected date must be grather than start date\n                                if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") <= moment(value).locale('en').format('YYYY-MM-DD'))  \n                                {\n                                    total = count++;\n                                }                        \n                            } \n\n                            // first schedule total day because end date can start form between\n                            else if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                            {\n                                // selected date must be less than end date\n                                if(moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") >= moment(value).locale('en').format('YYYY-MM-DD'))\n                                    total = count++;                     \n                                                        \n                            }\n                            else if(this.months.length == 1)\n                            {   \n                                // selected date must be less than end date and grather than start date\n                                if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(value).locale('en').format('YYYY-MM-DD') && \n                                    moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(value).locale('en').format('YYYY-MM-DD')\n                                   )\n                                {   \n                                    total = count++; \n                                }       \n                            }\n                            else\n                            {\n                                total = count++;\n                            }\n                        }\n                    \n                        \n                    }.bind(this));\n                }.bind(this));    \n            }\n            //===========================EVENT CREATE CASE END ==========================================    \n\n\n            // ========================= EVENT EDIT CASE START =====================================\n\n             // use this condition when user edit event\n            // total event's dates in daily event\n            if(Object.keys(this.schedules).length > 0)\n            {   \n                \n                // total event's dates in daily event\n                if(this.schedules.repetitive_type == 1  && this.schedules.repetitive_type && this.schedules.repetitive_dates != null )\n                {\n                    var repetitive_dates     = JSON.parse(this.schedules.repetitive_dates.split(','));  \n                    \n\n                    // first schedule total day because start date can start form between \n                    if(this.months[0] == this.month && this.months.length != 1)\n                    {\n                        total        = count_days - moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format(\"DD\")+1;\n                        let count_d  = total;\n                        \n                        repetitive_dates.forEach(function(v,k){\n\n                            \n                            // selected dates must be grather than start date\n                            if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                            {\n                                count_d     = count_d - 1;\n                                total       = count_d; \n                            }    \n                        }.bind(this))\n                                                \n                    }\n\n                    // first schedule total day because end date can start form between\n                    else if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                    {\n                        total        = moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format(\"DD\"); \n                        let count_d  = total;  \n\n                        repetitive_dates.forEach(function(v,k){\n                           // selected dates must be less than end date\n                            if(moment(this.local_end_date, \"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v, 'YYYY-MM-DD').format('YYYY-MM-DD') )\n                            {\n                            \n                                count_d     = count_d - 1;\n                                total       = count_d; \n                                \n                            }    \n                        }.bind(this))                      \n                    }\n                    \n                    // total days for only one month\n                    else if(this.months.length == 1)\n                    {\n                        var a = moment(this.local_start_date,\"YYYY-MM-DD\").locale('en');\n                        var b = moment(this.local_end_date,\"YYYY-MM-DD\").locale('en');\n                        \n                        total        = b.diff(a, 'days')+1; \n                        let count_d  = total;  \n\n                        this.repetitive_dates.forEach(function(v,k){\n                            // selected date must be less than end date and grather than start date\n                            if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD') && moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                            {\n                                count_d     = count_d - 1;\n                                total       = count_d; \n                                \n                            }    \n                            \n\n                        }.bind(this))  \n                    }\n                    \n                    else\n                    {\n                        total  = count_days - repetitive_dates.length;\n                        \n                    }\n                }\n\n                // // use this condition when user edit event\n                // // total event's dates in monthly event\n                if(this.schedules.repetitive_type == 3  && this.schedules.repetitive_type && this.schedules.repetitive_dates != null)\n                {\n                    var repetitive_dates     = JSON.parse(this.schedules.repetitive_dates.split(','));  \n                    total                    = repetitive_dates.length;\n\n                    // first schedule total day because start date can start from between\n                    if(this.months[0] == this.month && this.months.length != 1)\n                    {\n                        \n                        let count_d  = 0 ;\n                        repetitive_dates.forEach(function(v,k){\n\n                            // selected date must be grather then start date\n                            if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") <= moment(this.month+'-'+v, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                                count_d = count_d + 1;\n\n                        }.bind(this));\n\n                        total  = count_d;\n                                                \n                    }\n\n                    // first schedule total day because end date can start form between\n                    if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                    {\n                        \n                        let count_d  = 0 ;\n                        repetitive_dates.forEach(function(v,k){\n                              \n                            // selected date must be grather then start date\n                            if(moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format(\"YYYY-MM-DD\") >= moment(this.month+'-'+v, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                                count_d = count_d + 1;\n                        }.bind(this));\n\n                        total    = count_d;\n                        \n                    }\n\n                    // total days for only one month\n                    if(this.months.length == 1)\n                    {\n                        var a = moment(this.local_start_date,\"YYYY-MM-DD\").locale('en');\n                        var b = moment(this.local_end_date,\"YYYY-MM-DD\").locale('en');\n                        \n                        total        = b.diff(a, 'days')+1; \n\n                        let count_d  = 0 ;\n                        this.repetitive_dates.forEach(function(v,k){\n                            \n                            // selected date must be less than end date and grather than start date\n                            if(moment(this.local_start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') <= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD') && moment(this.local_end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD') >= moment(this.month+'-'+v.value, 'YYYY-MM-DD').format('YYYY-MM-DD'))\n                                count_d = count_d + 1;\n                        }.bind(this));\n\n                        total    = count_d;\n                        \n                    }\n                    \n                }\n\n                // // use this condition when user edit event\n                // // total event's dates in weekly event\n                if(this.schedules.repetitive_type == 2  && this.schedules.repetitive_type && this.schedules.repetitive_days != null)\n                {\n                    var all_dates = [];\n                    var i         = 1;\n                    var $_this    = this;\n                    var count     = 1;\n                    total         = 0;\n                    \n                    while( i <= count_days)\n                    {\n                        // make dates object of moment according to months and year\n                        all_dates[i] = moment(this.month+'-'+i, \"YYYY-MM-DD\").format(\"YYYY-MM-DD\");\n                        i++;\n                    }\n                    \n                    var repetitive_days_temp     = this.schedules.repetitive_days.split(','); \n                    \n                    var repetitive_days          = [] \n                    \n                    repetitive_days_temp.forEach(function(v, key){\n                        \n                        if(Number(v)==1)\n                        repetitive_days[key]     = \"Sunday\";\n                        if(Number(v)==2)\n                            repetitive_days[key] = \"Monday\";\n                        if(Number(v)==3)\n                            repetitive_days[key] = \"Tuesday\";\n                        if(Number(v)==4)\n                            repetitive_days[key] = \"Wednesday\";\n                        if(Number(v)==5)\n                            repetitive_days[key] = \"Thursday\";\n                        if(Number(v)==6)\n                            repetitive_days[key] = \"Friday\";      \n                        if(Number(v)==7)\n                            repetitive_days[key] = \"Saturday\";        \n                \n                    }.bind(this));\n                    \n                    all_dates.forEach(function(value, key){\n                        repetitive_days.forEach(function(value1, key1){\n                         \n                            if(moment(value).locale('en').format(\"dddd\") == value1)\n                            {\n                                // first schedule total day because start date can start form between \n                                if(this.months[0] == this.month && this.months.length != 1)\n                                {   \n                                    // selected date must be grather than start date\n                                    if(moment(this.local_start_date).format(\"YYYY-MM-DD\") <= moment(value).format('YYYY-MM-DD'))  \n                                    {\n                                        total = count++;\n                                    }                        \n                                } \n\n                                // first schedule total day because end date can start form between\n                                else if(this.months[this.months.length-1] == this.month && this.months.length != 1)\n                                {\n                                    // selected date must be less than end date\n                                    if(moment(this.local_end_date).format(\"YYYY-MM-DD\") >= moment(value).format('YYYY-MM-DD'))\n                                        total = count++;                     \n                                                            \n                                }\n                                // total days in one months\n                                else if(this.months.length == 1)\n                                {\n                                    // selected date must be less than end date and grather than start date\n                                    if(moment(this.local_start_date).format('YYYY-MM-DD') <= moment(value).format('YYYY-MM-DD') && \n                                        moment(this.local_end_date).format('YYYY-MM-DD') >= moment(value).format('YYYY-MM-DD')\n                                    )\n                                    {   \n                                        total = count++; \n                                    }   \n                                }\n                                else\n                                {\n                                    total = count++;\n                                }\n                            }\n                    \n                        }.bind(this));\n                    }.bind(this));    \n                    \n                }\n            }    \n            //===========================EVENT EDIT CASE END ==========================================    \n            \n            return total;\n        },\n\n        // make date option according to month\n        make_date_options(){\n\n            this.repetitive_dates_options = [];\n            let month_end_date   = moment(this.month).daysInMonth();\n            let i                = 1;\n            \n            for(i = 1; i <= month_end_date; i++)\n            {   \n                this.repetitive_dates_options.push({value : (i.toString().length == 1 ? ('0'+i) : i ) ,text : i});\n            }\n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        }\n\n    },\n\n    watch: {\n        v_repetitive : function() {\n            this.updateSchedule();\n            \n        },\n        sch_r_type : function () {\n            this.updateSchedule();\n            this.schedules = [];\n        },\n        repetitive_days : function () {\n            this.schedule_total_days();\n            this.updateSchedule();\n        },\n        repetitive_dates : function () {\n            this.schedule_total_days();\n            \n            this.updateSchedule();\n        },\n        from_time : function () {\n            \n            this.updateSchedule();\n        },\n        to_time : function () {\n            this.updateSchedule();\n        },\n\n        // parent component prop data\n        start_date : function () {\n            \n            this.schedule_total_days();\n            this.updateSchedule();\n            this.convert_to_local_tz();\n            \n        },\n\n        end_date : function () {\n            \n            this.schedule_total_days();\n            this.updateSchedule();\n        },\n\n        // parent start date and it is already to local timezone\n        start_date_p : function(){\n            this.start_date = this.convert_date_to_local(this.start_date_p);\n            this.schedules  = [];\n            this.convert_to_local_tz();\n            this.schedule_total_days();\n            \n        },\n\n        // parent end date and it is already to local timezone\n        end_date_p : function(){\n            this.end_date = this.convert_date_to_local(this.end_date_p);\n            this.schedules  = [];\n            this.convert_to_local_tz();\n            this.schedule_total_days();\n        },\n\n        // parent start time and it is already to local timezone\n        start_time_p : function(){\n            this.start_time = this.start_time_p;\n            this.convert_to_local_tz();\n        },\n\n        // parent end time and it is already to local timezone\n        end_time_p : function(){\n            this.end_time = this.end_time_p;\n            this.convert_to_local_tz();\n        },\n\n        // updates total days and schedule\n        months : function(){\n            this.convert_to_local_tz();\n            this.schedule_total_days();\n            this.updateSchedule();\n            this.make_date_options();\n            \n        }\n\n        \n    },\n\n    mounted(){\n        // make date options dynamically\n        this.make_date_options();\n        this.selectedTimes();\n        this.editSchedule();\n        \n        \n    },\n    \n}\n</script>","<template>\n    <div>\n                    \n        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\"  class=\"lgx-contactform\">\n            <input type=\"hidden\" name=\"event_id\" v-model=\"event_id\">\n            \n            <div class=\"row\">\n\n                <div class=\"col-xs-12 col-sm-4 col-md-6\">\n                    <div class=\"form-group mb-3\">\n                        <label class=\"form-label\" for=\"start_date\">{{ trans('em.start_date') }}</label>\n                        <date-picker \n                            v-model=\"start_date\" \n                            type=\"date\" \n                            format=\"YYYY-MM-DD\" \n                            :placeholder=\"trans('em.start_date')\"\n                            class=\"form-control\"\n                            :lang=\"$vue2_datepicker_lang\"\n                        ></date-picker>\n                        <input type=\"hidden\" class=\"form-control\"  :value=\"convert_date(start_date)\" name=\"start_date\"  v-validate=\"'required'\">\n                        <span v-show=\"errors.has('start_date')\" class=\"help text-danger\">{{ errors.first('start_date') }}</span>\n                    </div>\n                </div>\n\n                <div class=\"col-xs-12 col-sm-4 col-md-6\">\n                    <div class=\"form-group mb-3\">\n                        <label class=\"form-label\" for=\"start_time\">{{ trans('em.start_time') }}</label>\n                        <date-picker \n                            v-model=\"start_time\" \n                            type=\"time\" \n                            format=\"HH:mm\" \n                            :placeholder=\"trans('em.start_time')\"\n                            class=\"form-control\"\n                            :lang=\"$vue2_datepicker_lang\"\n                        ></date-picker>\n                        <input type=\"hidden\" class=\"form-control\"  :value=\"convert_time(start_time)\" name=\"start_time\"  v-validate=\"'required'\">\n                        <span v-show=\"errors.has('start_time')\" class=\"help text-danger\">{{ errors.first('start_time') }}</span>\n                    </div>\n                </div>\n\n                <div class=\"col-xs-12 col-sm-4 col-md-6\">\n                    <div class=\"form-group mb-3\">\n                        <label class=\"form-label\" for=\"end_date\">{{ trans('em.end_date') }}</label>\n                        <date-picker \n                            v-model=\"end_date\" \n                            type=\"date\" \n                            format=\"YYYY-MM-DD\"\n                            :placeholder=\"trans('em.end_date')\"\n                            class=\"form-control\"\n                            :lang=\"$vue2_datepicker_lang\"\n                        ></date-picker>\n                        <input type=\"hidden\" class=\"form-control\"  :value=\"convert_date(end_date)\" name=\"end_date\"  v-validate=\"'required'\">\n                        <span v-show=\"errors.has('end_date')\" class=\"help text-danger\">{{ errors.first('end_date') }}</span>\n                    </div>\n                </div>\n\n                <div class=\"col-xs-12 col-sm-4 col-md-6\">\n                    <div class=\"form-group mb-3\">\n                        <label class=\"form-label\" for=\"end_time\">{{ trans('em.end_time') }}</label>\n                        <date-picker \n                            v-model=\"end_time\" \n                            type=\"time\" \n                            format=\"HH:mm\" \n                            :placeholder=\"trans('em.end_time')\"\n                            class=\"form-control\"\n                            :lang=\"$vue2_datepicker_lang\"\n                        ></date-picker>\n                        <input type=\"hidden\" class=\"form-control\"  :value=\"convert_time(end_time)\" name=\"end_time\" \t v-validate=\"'required'\">\n                        <span v-show=\"errors.has('end_time')\" class=\"help text-danger\">{{ errors.first('end_time') }}</span> \n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"alert alert-danger\" v-if=\"editDateValidation()\">\n                <span class=\"text-danger\"> {{ trans('em.date_info') }}</span>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-12\" \n                    v-if=\"!repetitive && check_date(start_date) && check_date(end_date) && check_time(start_time) && check_time(end_time)\"\n                >\n                    <div class=\"alert alert-primary\">\n                        <p class=\"text-primary fw-bold\">\n                            {{ trans('em.start') }}: {{ changeDateFormat(start_date, \"YYYY-MM-DD\") }} &nbsp;|&nbsp; {{ trans('em.end') }}: {{ changeDateFormat(end_date, \"YYYY-MM-DD\") }}\n                        </p>\n                        <hr>\n                        <!-- In case of simple : total hours (from start date to end date) -->\n                        <p class=\"mb-0\">\n                            <strong>{{ trans('em.duration') }} </strong> \n                            {{ countDays(start_date, end_date)+(countDays(start_date, end_date) > 1 ? ' days' : ' day')  }}\n                            &nbsp;|&nbsp;\n                            \n                            {{ \n                                counthours(moment(start_date).format('YYYY-MM-DD') +' '+ moment(start_time).format('HH:mm:ss '),\n                                        moment(end_date).format('YYYY-MM-DD')+' '+ moment(end_time).format('HH:mm:ss ')) + \n                                (counthours(moment(start_date).format('YYYY-MM-DD') +' '+ moment(start_time).format('HH:mm:ss '),\n                                        moment(end_date).format('YYYY-MM-DD')+' '+ moment(end_time).format('HH:mm:ss ')) > 1 ? ' hours' : ' hour')\n                            }}\n                        </p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <div class=\"d-flex justify-content-between px-0 mb-3\">\n                        <div>\n                            <h5 class=\"mb-0\">{{ trans('em.add_repetitive_schedules') }}</h5>\n                            <span class=\"small text-muted text-wrap\">{{ trans('em.add_repetitive_schedules_ie') }}</span>\n                        </div>\n                        <div>\n                            <div class=\"form-check form-switch\">\n                                <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"repetitive\" name=\"repetitive\" v-model=\"repetitive\" value=\"1\" @change=\"isDirty()\">\n                                <label class=\"form-check-label\" for=\"repetitive\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <div class=\"d-flex justify-content-between px-0 mb-3\" v-if=\"repetitive && repetitive_type.value != 1 && repetitive_type_temp != 1\">\n                        <div>\n                            <h5 class=\"mb-0\">{{ trans('em.seasonal_tickets') }}</h5>\n                            <span class=\"small text-muted text-wrap\">{{ trans('em.seasonal_tickets_ie') }}</span>\n                        </div>\n                        <div>\n                            <div class=\"form-check form-switch\">\n                                <input type=\"checkbox\" class=\"form-check-input form-check-input-lg\" id=\"merge_schedule\" name=\"merge_schedule\" v-model=\"merge_schedule\" value=\"1\" @change=\"isDirty()\">\n                                <label class=\"form-check-label\" for=\"merge_schedule\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                    <div class=\"form-group mb-3\" v-if=\"repetitive\" >  \n                        <label class=\"form-label\">{{ trans('em.repetitive_type') }}</label>\n                        <multiselect \n                            v-model=\"repetitive_type\" \n                            :options=\"repetitive_type_options\"\n                            :placeholder=\"'-- '+trans('em.select_repetitive_type')\" \n                            label=\"text\" \n                            track-by=\"value\" \n                            :multiple=\"false\"\n                            :close-on-select=\"true\" \n                            :clear-on-select=\"false\" \n                            :hide-selected=\"false\" \n                            :preserve-search=\"true\" \n                            :preselect-first=\"true\"\n                            :allow-empty=\"false\"\n                            @input=\"event_type\"\n                            :class=\"'form-control px-0 py-0 border-0'\"\n                            @select=\"isDirty()\"\n                        ></multiselect>\n                    </div>\n                </div>\n                <div class=\"col-md-6\" v-if=\"repetitive && repetitive_type.value != 1 && repetitive_type_temp != 1\">\n                    <div class=\"alert alert-primary mt-md-5 p-2 small\"  v-if=\"merge_schedule <= 0\"><i class=\"fas fa-info\"></i> {{ trans('em.merge_false')}}</div>\n                    <div class=\"alert alert-primary mt-md-5 p-2 small\" v-if=\"merge_schedule > 0\"><i class=\"fas fa-info\"></i> {{ trans('em.merge_true')}}</div>\n                </div>\n            </div>\n\n            <div class=\"row\"\n                v-if=\"validDate()\" \n            >\n                <div class=\"col-md-12\">\n                    <div \n                        v-for=\"(item, index) in calculate_months\" :key=\"index\">\n                        <schedule-component\n                            :sch_index=\"index\"\n                            :sch_r_type=\"r_type\"\n                            :start_time_p=\"start_time\"\n                            :end_time_p=\"end_time\"\n                            :start_date_p=\"start_date\"\n                            :end_date_p=\"end_date\"\n                            :schedules_p=\"schedules.length ? schedules[index] : []\"\n                            :month=\"calculate_months.length > 0 ? calculate_months[index] : 0\"\n                            :months=\"calculate_months.length > 0 ? calculate_months : 0\"\n                        >\n                        </schedule-component>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <button type=\"submit\" class=\"btn btn-primary mt-2 btn-lg\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                </div>\n            </div>\n            \n        </form>\n                \n    </div>\n</template>\n\n<script>\nimport { mapState, mapMutations} from 'vuex';\nimport ScheduleComponent from './Schedule.vue';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n\n    props: [\n        'server_timezone'\n    ],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    components: {\n        ScheduleComponent\n    },\n\n    data() {\n        return {\n            schedules           : [],\n            moment              : moment,\n\n            // local variable\n            calculate_months    : [],\n            r_type              : null,\n                \n            // important!!! declare all form fields\n            start_time          : null,\n            end_time            : null,\n            start_date          : null,\n            end_date            : null,\n            repetitive          : 0, \n            merge_schedule      : 0,\n\n            repetitive_type     : [],\n            repetitive_type_options: [\n                {value: 1, text: trans('em.daily')},\n                {value: 2, text: trans('em.weekly')},\n                {value: 3, text: trans('em.monthly')},\n            ],\n\n            //local timezone\n            local_start_date   : null,\n            local_end_date     : null,\n            local_start_time   : null,\n            local_end_time     : null,\n\n            // for merge schedule\n            repetitive_type_temp : 0,\n        }\n    },\n    computed: {\n        // get global variables\n        ...mapState( ['event_id', 'v_repetitive', 'v_repetitive_days', 'v_repetitive_dates', 'v_from_time', 'v_to_time', 'organiser_id', 'event', 'is_dirty']),\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // reset form and close modal\n        close: function () {\n            this.$refs.form.reset();\n        },\n\n        // reset schedule data on check box and repetitive type\n        reset_schedule(){\n            this.add({ \n                v_repetitive         : this.repetitive,\n            });\n\n        },\n       \n        event_type(){\n            // repetitive_type\n            this.r_type         = this.repetitive_type ? this.repetitive_type.value : this.r_type;\n        },\n\n        // getSchedule\n        getSchedule()\n        {\n            let post_url = route('eventmie.schedules');\n            let post_data = {\n                'event_id'         : this.event_id,\n                'organiser_id'     : this.organiser_id\n            };\n\n            axios.post(post_url, post_data)\n            .then(res => {\n                this.schedules   = res.data.schedules;\n                this.repetitive  = this.event.repetitive;\n                this.merge_schedule = this.event.merge_schedule <= 0 ? false : true;\n                // set selected repetitive type\n               \n                this.repetitive_type.push(this.repetitive_type_options[this.schedules[0].repetitive_type-1]);\n                this.r_type      = this.repetitive_type[0].value; \n                \n                var _this = this;\n                if(this.schedules.length > 0){\n                    this.calculate_months = [];\n                    this.schedules.forEach(function(value, key) {\n                        _this.calculate_months[key] = moment(value['from_date'], 'YYYY-MM-DD').format('YYYY-MM');\n                        \n                    });\n                }\n                \n\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n        \n        editEvent() {\n            // server timezone change to local timezone\n            this.convert_to_local_tz();\n\n            this.start_date  = this.setDateTime(this.local_start_date);\n            this.end_date    = this.setDateTime(this.local_end_date);\n            this.start_time  = this.setDateTime(this.local_start_time);\n            this.end_time    = this.setDateTime(this.local_end_time);\n            \n            // getSchedule if event is repetitive and in case of edit event\n            if(this.event.repetitive == 1 && this.event_id)\n            {\n                this.getSchedule();\n\n                // merge schedule\n                this.repetitive_type_temp = this.event.repetitive_type;\n                    \n            }\n            \n        },\n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // make server side date with help of number then again convert server side date to number\n        convertToServerDate(data) {\n            \n            \n            \n            var  data = data;\n            var  v_repetitive_dates = [];\n            var  date_number;\n            var  count;\n            \n            data.forEach(function(value, key){\n                \n                if(value == null){\n                    v_repetitive_dates[key] = null;\n                    \n                    return v_repetitive_dates;\n                }\n\n                v_repetitive_dates[key] = [];\n                date_number             = value.split(',');\n                count                   = date_number.length;\n                \n                if(Object.keys(date_number).length > 0){\n                    date_number.forEach(function(date_number, key1){\n                    \n                        // 1.make date by number\n                        // 2.convert local date to server side date\n                        // 3.convert server side to number_date\n                    \n\n                        v_repetitive_dates[key] += moment(this.dateToFullDate(date_number, this.calculate_months[key]),\"dddd LL\").locale('en').format('DD');\n\n                        // add comma except last key\n                        if(key1 < (count-1) )\n                            v_repetitive_dates[key] += ',';\n\n                    }.bind(this));\n                }\n                \n            }.bind(this));\n            return  v_repetitive_dates;\n        },\n\n        // submit form\n        formSubmit(event) {\n            var  schedule_ids = []\n       \n            if(this.schedules.length > 0)\n            {\n                this.schedules.forEach(function (value, key) {\n                    schedule_ids[key] = value.id;\n                });\n            }\n\n            var v_repetitive_dates = [];\n            var v_repetitive_days  = [];\n            \n            // v_repetitive_dates \n            if(this.v_repetitive_dates.length > 0)\n            {   \n                v_repetitive_dates  = this.convertToServerDate(this.v_repetitive_dates);\n                \n            }    \n            // v_repetitive_days \n            if(this.v_repetitive_days.length > 0)    \n                v_repetitive_days   = this.convertToServerDate(this.v_repetitive_days);\n            \n            // prepare form data for post request\n            let post_url = route('eventmie.myevents_store_timing');\n   \n            let post_data = {\n                // start_date\n                'start_date'       : moment(this.start_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD'),\n                'end_date'         : moment(this.end_date,\"YYYY-MM-DD\").locale('en').format('YYYY-MM-DD'),\n                'start_time'       : moment(this.start_time).locale('en').format('HH:mm:ss'),\n                'end_time'         : moment(this.end_time).locale('en').format('HH:mm:ss'),\n                'repetitive'       : Number(this.repetitive),\n                'merge_schedule'   : Number(this.merge_schedule),\n                'repetitive_type'  : this.r_type,\n                \n                // schedule data (vuex data)\n                'repetitive_days'  : v_repetitive_days,\n                'repetitive_dates' : v_repetitive_dates,\n                'from_time'        : this.v_from_time,\n                'to_time'          : this.v_to_time,\n                'event_id'         : this.event_id,\n                'organiser_id'     : this.organiser_id,\n                'schedule_ids'     : schedule_ids,\n            };\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                \n                if(res.data.status)\n                {\n                    this.showNotification('success', trans('em.timings')+' '+trans('em.event_save_success'));\n                }\n                // reload page   \n                setTimeout(function() {\n                    location.reload(true);\n                }, 1000);\n                \n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        //calculate months between two dates\n        calculateMonth() {\n            // reset/empty schedules vuex data\n            \n            this.add({ \n                v_repetitive_days   : [],\n                v_repetitive_dates  : [],\n                v_from_time         : [],\n                v_to_time           : [],\n            });\n            // count months\n            if(this.check_date(this.start_date) && this.check_date(this.end_date))\n                this.calculate_months = this.countMonth(this.start_date, this.end_date);\n        },\n\n        // server time convert into local timezone\n        convert_to_local_tz(){\n            // this.local_start_date   = this.convert_date_to_local(this.event.start_date);\n            // this.local_end_date     = this.convert_date_to_local(this.event.end_date);\n            // this.local_start_time   = this.convert_time_to_local(this.event.start_date, this.event.start_time);\n            // this.local_end_time     = this.convert_time_to_local(this.event.end_date, this.event.end_time);\n\n            \n            this.local_start_date   = this.userTimezone(this.event.start_date+' '+this.event.start_time, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD');\n            this.local_end_date     = this.userTimezone(this.event.end_date+' '+this.event.end_time, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD');\n            this.local_start_time   = this.userTimezone(this.event.start_date+' '+this.event.start_time, 'YYYY-MM-DD HH:mm:ss');\n            this.local_end_time     = this.userTimezone(this.event.end_date+' '+this.event.end_time, 'YYYY-MM-DD HH:mm:ss');\n        },\n\n        // check valid date \n\n        validDate(){\n            var status = false;\n           \n           if(this.userTimezone(this.event.start_date+' '+this.event.start_time, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD') != moment(this.start_date).format('YYYY-MM-DD')) {\n                if(this.repetitive && \n                    this.check_date(this.start_date) && \n                    this.check_date(this.end_date) &&\n                    this.check_time(this.start_time) && \n                    this.check_time(this.end_time) && \n                    !moment(this.start_date).isSame(this.moment(this.end_date), 'date') &&\n                    moment(this.start_date).format('YYYY-MM-DD') >= moment().format('YYYY-MM-DD') &&\n                    moment(this.start_date).format('YYYY-MM-DD') < moment(this.end_date).format('YYYY-MM-DD') \n                ) {\n                \n                    status = true\n                    \n\n                }\n                else {\n                \n                    this.repetitive = 0;\n                    this.merge_schedule = 0;\n                    \n                    status = false;\n                }\n            } else {\n\n                status = true;\n            }\n\n            if(!this.repetitive || this.repetitive == 0){\n                this.repetitive     = 0;\n                this.merge_schedule = 0;\n                \n                status = false;\n            }\n            \n            return status;\n            \n        },\n\n        // edit date validation\n        editDateValidation(){\n\n            if(this.userTimezone(this.event.start_date+' '+this.event.start_time, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD') != moment(this.start_date).format('YYYY-MM-DD')) {\n                if(\n                    moment(this.start_date).format('YYYY-MM-DD') <= moment().format('YYYY-MM-DD') ||\n                    moment(this.start_date).format('YYYY-MM-DD') > moment(this.end_date).format('YYYY-MM-DD') \n                ) {\n                    \n                    return true;\n                    \n\n                }\n                else {\n                \n                    return false;\n                }\n            } else {\n\n                return false;\n            }\n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n\n\n    },\n    \n    watch: {\n        start_date : function () {\n            this.calculateMonth();\n            this.schedules = [];\n\n            if(this.local_start_date != this.convert_date(this.start_date)) {\n                this.isDirty();\n            }\n        },\n        end_date : function () {\n            this.calculateMonth();     \n\n            if(this.local_end_date != this.convert_date(this.end_date)) {\n                this.isDirty();\n            }\n\n        },\n        start_time : function () {\n            if(this.event.start_time != this.convert_time(this.start_time)) {\n                this.isDirty();\n            }\n\n        },\n        end_time : function () {\n            if(this.event.end_time != this.convert_time(this.end_time)) {\n                this.isDirty();\n            }\n        },\n        repetitive: function () {\n            this.reset_schedule();\n        },\n        r_type : function() {   \n            this.reset_schedule();\n        },\n\n        repetitive_type: function () {\n            \n            // merge schedule is not for daily event \n            if(this.repetitive_type)\n            {\n                if(this.repetitive_type.value == 1)\n                    this.merge_schedule = 0;\n                \n\n                if(this.repetitive_type.value == 2 || this.repetitive_type.value == 3 )\n                    this.repetitive_type_temp = 0;\n\n            }\n        },\n    },\n\n    mounted(){\n        this.isDirtyReset();\n        // if user have no event_id then redirect to details page\n        let event_step  = this.eventStep();\n        \n        if(event_step)\n        {\n            var $this = this;\n            this.getMyEvent().then(function (response){\n                if(Object.keys($this.event).length)\n                    $this.editEvent();\n            });\n        }\n\n    }\n    \n}\n</script>","<template>\n    <div class=\"custom_model\">\n        \n        <div  class=\"modal show\" v-if=\"openModal_1 || openModal_2\">\n            <div class=\"modal-dialog modal-lg w-100\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h1 class=\"modal-title fs-3\" id=\"exampleModalLabel\">{{ (edit_ticket ? trans('em.update') : trans('em.create')) }} {{ trans('em.ticket') }}</h1>\n                        <button type=\"button\" class=\"btn btn-sm bg-danger text-white close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" @click=\"close()\"><span aria-hidden=\"true\">&times;</span></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\">\n                            <input v-if=\"edit_ticket\" type=\"hidden\" class=\"form-control lgxname\"  name=\"ticket_id\" v-model=\"edit_ticket.id\">\n                            <input type=\"hidden\" class=\"form-control lgxname\"  name=\"event_id\" v-model=\"event_id\">\n                            <input type=\"hidden\" class=\"form-control lgxname\"  name=\"organiser_id\" v-model=\"organiser_id\">\n                            <input type=\"hidden\" class=\"form-control lgxname\"  name=\"taxes_ids\"  v-model=\"taxes_ids\">\n\n                            <div class=\"modal-body\">\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"title\">{{ trans('em.title') }}</label>\n                                    <input type=\"text\" class=\"form-control lgxname\"  name=\"title\"  v-model=\"title\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('title')\" class=\"small text-danger\">{{ errors.first('title') }}</span>\n                                </div>\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"price\">{{ trans('em.price') }} ({{ currency }})</label>\n                                    <input type=\"text\" class=\"form-control lgxname\"  name=\"price\" v-model=\"price\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('price')\" class=\"small text-danger\">{{ errors.first('price') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"quantity\">{{ trans('em.max_ticket_qty') }}</label>\n                                    <input type=\"text\" class=\"form-control lgxname\"  name=\"quantity\" v-model=\"quantity\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('quantity')\" class=\"small text-danger\">{{ errors.first('quantity') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"customer_limit\">{{ trans('em.customer_limit') }}</label>\n                                    <input type=\"text\" class=\"form-control lgxname\"  name=\"customer_limit\" v-model=\"customer_limit\" >\n                                    <span class=\"small text-muted\">{{ trans('em.customer_limit_info') }}</span>\n                                    <span v-show=\"errors.has('customer_limit')\" class=\"small text-danger\">{{ errors.first('customer_limit') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"description\">{{ trans('em.description') }}</label>\n                                    <textarea name=\"description\" class=\"form-control lgxname\" rows=\"2\" v-model=\"description\"></textarea>\n                                    <span v-show=\"errors.has('description')\" class=\"small text-danger\">{{ errors.first('description') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\">{{ trans('em.taxes') }}</label>\n                                    <multiselect\n                                        v-model=\"tmp_taxes_ids\" \n                                        :options=\"taxes_options\" \n                                        :placeholder=\"'-- '+trans('em.select')+' --'\" \n                                        label=\"text\" \n                                        track-by=\"value\" \n                                        :multiple=\"true\"\n                                        :close-on-select=\"false\" \n                                        :clear-on-select=\"false\" \n                                        :hide-selected=\"false\" \n                                        :preserve-search=\"true\" \n                                        :preselect-first=\"false\"\n                                        :allow-empty=\"true\"\n                                        :class=\"'form-control px-0 py-0 border-0'\"\n                                    >\n                                    </multiselect>\n\n                                </div>\n\n                            </div>\n                            \n                            <div class=\"modal-footer\">\n                                <button type=\"submit\" class=\"btn btn-primary btn-lg\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n                \n    </div>\n</template>\n\n<script>\n\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n    props: [\"edit_ticket\", 'taxes', 'currency', 'openModal_1', 'openModal_2'],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    data() {\n        return {\n            title       : null,\n            price       : null,\n            quantity    : null,\n            description : null,\n            tax_id      : 0,\n    \n            // for taxes\n            taxes_ids         : [],\n            taxes_options     : [],\n            tmp_taxes_ids     : [],\n            selected_taxes    : [],\n            customer_limit    : null,\n            \n        }\n    },\n\n    computed: {\n        // get global variables\n        ...mapState( ['tickets', 'event_id', 'organiser_id']),\n    },\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // reset form and close modal\n        close: function () {    \n            this.$parent.edit_index  = null;\n            this.$parent.openModal_1   = false;\n            this.$parent.openModal_2   = false;\n        },\n\n        editTicket() {\n            this.title        = this.edit_ticket.title;\n            this.price        = this.edit_ticket.price;\n            this.quantity     = this.edit_ticket.quantity;\n            this.description  = this.edit_ticket.description;\n            this.tax_id       = this.edit_ticket.tax_id ? this.edit_ticket.tax_id : 0;\n            this.customer_limit       = this.edit_ticket.customer_limit;\n        },\n        \n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n            // prepare form data for post request\n            let post_url = route('eventmie.tickets_store');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                // on success\n                // use vuex to update global sponsors array\n                if(res.data.status)\n                {\n                    this.showNotification('success', trans('em.ticket')+' '+trans('em.saved')+' '+trans('em.successfully'));\n                    this.close();\n                    // reload page   \n                    setTimeout(function() {\n                        location.reload(true);\n                    }, 1000);\n                }    \n\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        updateItem() {\n            this.$emit('changeItem');\n        },\n\n        // set taxes options\n\n        setTaxesOptions(){\n            // set mutiple taxes for multiselect list\n            let tax_type = '';\n            let tax_net_price = '';\n            if(Object.keys(this.taxes).length > 0)\n            {\n                this.taxes.forEach(function(v, key) {\n                    tax_type = v.rate_type == 'percent' ? '%' : ' '+this.currency;\n                    tax_net_price = v.net_price == 'excluding' ? trans('em.exclusive') : trans('em.inclusive');\n\n                    this.taxes_options.push({value : v.id, text : v.title+' ('+v.rate+tax_type+' '+tax_net_price+')' });\n                }.bind(this));\n            } \n        },\n        // show selected taxes\n        setSelcetedTaxes(){\n            \n            let tax_type = '';\n            let tax_net_price = '';\n            if(Object.keys(this.edit_ticket.taxes).length > 0)\n            {\n                // set mutiple tags for multiselect list\n                this.tmp_taxes_ids = []; \n                this.edit_ticket.taxes.forEach(function (v, key) {\n                    tax_type = v.rate_type == 'percent' ? '%' : ' '+this.currency;\n                    tax_net_price = v.net_price == 'excluding' ? trans('em.exclusive') : trans('em.inclusive');\n\n                    this.tmp_taxes_ids.push({value : v.id, text : v.title+' ('+v.rate+tax_type+' '+tax_net_price+')' });\n                }.bind(this));\n            \n            }  \n        },\n\n        // update taxes for submit\n        updateTaxes(){\n            \n            this.taxes_ids = [];\n            \n            //tags\n            if(Object.keys(this.tmp_taxes_ids).length > 0)\n            {\n                this.tmp_taxes_ids.forEach(function (value, key) {\n                    this.taxes_ids[key] = value.value;\n\n                }.bind(this));\n                \n                // convert into array \n                this.taxes_ids = JSON.stringify(this.taxes_ids);\n                \n            }\n            \n        },\n\n     \n    },\n    mounted() {\n        \n        if(this.edit_ticket) {\n            this.editTicket();\n            \n            // set selected tickets options\n            this.setSelcetedTaxes();\n        }\n        \n        // set taxes options\n        this.setTaxesOptions();\n        \n    },\n\n    watch: {\n        tmp_taxes_ids : function() {\n            this.updateTaxes();\n        },\n\n    },\n}\n</script>","<template>\n    <div>\n        \n        <button type=\"button\" class=\"btn btn-primary m-2\" @click=\"openModal_1 = true\" v-if=\"edit_index == null\"><i class=\"fas fa-ticket-alt\"></i> {{ trans('em.create_ticket') }}</button>\n        <ticket-component v-if=\"openModal_1\" :taxes =\"taxes\" @changeItem=\"updateItem\" :currency=\"currency\" :openModal_1=\"openModal_1\" ></ticket-component>\n        <div class=\"row\">\n            <div class=\"table-responsive\">\n                <table class=\"table text-wrap\">\n                    <thead class=\"table-light text-nowrap\">\n                        <tr>\n                            <th>{{ trans('em.title') }}</th>\n                            <th>{{ trans('em.price') }}</th>\n                            <th>{{ trans('em.quantity') }}</th>\n                            <th>{{ trans('em.actions') }}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr v-for=\"(ticket, index) in tickets\"\n                            v-bind:key=\"index\" \n                        >\n                            <td :data-title=\"trans('em.title')\">{{ ticket.title }}</td>\n                            <td :data-title=\"trans('em.price')\">{{ ticket.price+' '+ currency }}</td>\n                            <td :data-title=\"trans('em.quantity')\">{{ ticket.quantity }}</td>\n                            <td :data-title=\"trans('em.actions')\">\n                                <div class=\"btn-group text-nowrap\">\n                                    <button type=\"button\" class=\"btn btn-sm bg-primary text-white\" @click=\"()=>{edit_index = index; openModal_2 = true}\" ><i class=\"fas fa-edit\"></i> {{ trans('em.edit') }}</button>\n                                    <button type=\"button\" class=\"btn btn-sm bg-danger text-white\" @click=\"deleteTicket(ticket.id)\"><i class=\"fas fa-trash\"></i> {{ trans('em.delete') }}</button>\n                                </div>\n\n                                <ticket-component \n                                    :taxes =\"taxes\"\n                                    :edit_ticket=\"ticket\" \n                                    v-if=\"edit_index == index\" \n                                    @changeItem=\"updateItem\"\n                                    :currency=\"currency\"\n                                    :openModal_2=\"openModal_2\"\n                                ></ticket-component>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n                    \n    </div>\n</template>\n\n<script>\n\nimport { mapState, mapMutations} from 'vuex';\n\nimport TicketComponent from './Ticket.vue';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n\n    data() {\n        return {\n            edit_index : null,\n            taxes      : null,\n            currency   : null,\n            openModal_1  : false,\n            openModal_2  : false,\n        }\n    },\n\n    mixins:[\n        mixinsFilters\n    ],\n    components: {\n        TicketComponent,\n    },\n    computed: {\n        // get global variables\n        ...mapState( ['tickets', 'event_id', 'organiser_id']),\n    },\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // delete tickets\n        deleteTicket(ticket_id){\n            this.showConfirm(trans('em.ticket_delete_ask')).then((res) => {\n                if(res) {\n                    axios.post(route('eventmie.tickets_delete'), {\n                        ticket_id       : ticket_id,\n                        event_id        : this.event_id,\n                        organiser_id    : this.organiser_id\n                    })\n                    .then(res => {\n                    \n                        if(res.data.status)\n                        {\n                            this.showNotification('success', trans('em.ticket_delete_success'));\n                            this.getTickets();\n                        }\n                    })\n                    .catch(error => {\n                        Vue.helpers.axiosErrors(error);\n                    });\n                }\n            })\n\n           \n        },\n\n        // get all tickets       \n        getTickets() {\n            axios.post(route('eventmie.tickets'),{\n                'event_id'      : this.event_id,\n                'organiser_id'  : this.organiser_id,\n            })\n            .then(res => {\n                // fill data to global sponsors array\n                if(res.data.status)\n                {\n                    this.add({  \n                        tickets        : res.data.tickets,\n                    });\n\n                }\n                else\n                {\n                    // if status false and have not tickets \n                    this.add({  \n                        tickets        : [],\n                    });\n                }\n                \n                if(res.data.currency)\n                {\n                    this.currency  = res.data.currency;\n                }\n                \n            })\n            .catch(error => {\n                Vue.helpers.axiosErrors(error);\n            });\n        },  \n\n        getTaxes(){\n            axios.get(route('eventmie.tickets_taxes'),{\n                'event_id'      : this.event_id,\n                'organiser_id'  : this.organiser_id,\n            })\n            .then(res => {\n                if(res.data.status)\n                {\n                    this.taxes = res.data.taxes;\n                }\n            \n            })\n            .catch(error => {\n                Vue.helpers.axiosErrors(error);\n            });    \n        },\n\n        updateItem() {\n            this.getTickets();\n            // in edit case reload page \n            this.edit_index = null;\n            \n            \n        },\n\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n    },\n    \n    mounted() {\n        this.isDirtyReset();\n        // if user have no event_id then redirect to details page\n        let event_step  = this.eventStep();\n        \n        if(event_step)\n        {\n            this.getTaxes();\n\n            if(this.event_id)\n                this.getTickets();\n        }    \n    }\n}\n</script>","<template>\n    <div>\n        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\" class=\"lgx-contactform\">\n            <!-- add tags directly from this page -->\n\n            <div class=\"mb-3\">\n                <label class=\"form-label\">{{ trans('em.event_tags') }} ({{ trans('em.optional') }})</label>\n                <multiselect\n                    v-model=\"tmp_tags_ids\"\n                    :options=\"tags_options\" \n                    id=\"ajax\"\n                    label=\"text\"\n                    track-by=\"value\"\n                    :placeholder=\"'-- '+trans('em.search_tags')+' --'\" \n                    open-direction=\"bottom\"\n                    :multiple=\"true\"\n                    :searchable=\"true\"\n                    :loading=\"isLoading\"\n                    :internal-search=\"false\"\n                    :clear-on-select=\"true\"\n                    :close-on-select=\"false\"\n                    :options-limit=\"300\"\n                    :limit=\"20\"\n                    :limit-text=\"limitText\"\n                    :max-height=\"300\"\n                    :show-no-results=\"false\"\n                    :hide-selected=\"false\"\n                    @search-change=\"searchTags\"\n                    :allow-empty=\"true\"\n                    :class=\"'form-control px-0 py-0 border-0'\"\n                    :preserve-search=\"true\" \n                    :preselect-first=\"false\"\n                    @select=\"isDirty()\"\n                >\n                <template slot=\"tag\" slot-scope=\"{ option, remove }\">\n                    <span class=\"multiselect__tag\" @click=\"remove(option)\">\n                    <span >{{ option.text }}</span>\n                        <i aria-hidden=\"true\" tabindex=\"1\" class=\"multiselect__tag-icon\">\n                        </i>\n                    </span>\n                </template>\n                <template slot=\"clear\" slot-scope=\"props\">\n                    <div\n                    class=\"multiselect__clear\"\n                    v-if=\"tmp_tags_ids.length\"\n                    @mousedown.prevent.stop=\"clearAll(props.search)\"\n                    ></div>\n                </template>\n                <span slot=\"noResult\"> {{ trans('em.tags_not_found') }}</span>\n                </multiselect>\n            </div>\n            <div>\n                <tag-component :organiser_id=\"organiser_id\"></tag-component>\n            </div>\n            \n            <div>\n                <button :disabled=\"disable\" type=\"submit\" class=\"btn btn-primary btn-lg mt-3\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n            </div>\n        </form>\n\n        <hr />\n\n        <div class=\"bg-light card shadow-sm mt-3\">\n            <!-- Card header -->\n            <div class=\"card-header p-4 bg-white\">\n                <h3 class=\"mb-0\">{{ trans('em.publish_event') }}</h3>\n                <p class=\"mb-0\">{{ trans('em.publish_event_ie') }}</p>\n            </div>\n            <!-- Card body -->\n            <div class=\"card-body p-4\">\n                <div v-if=\"event.publish == 1\">\n                    <span class=\"text-danger h4\">{{ trans('em.unpublish_event') }}</span>\n                    <p class=\"text-danger\">{{ trans('em.unpublish_event_ie') }}</p>\n                </div>\n                \n                <button type=\"button\" class=\"btn btn-outline-success btn-lg\"\n                    :disabled=\"(Object.keys(this.is_publishable).length < 5 && event.publish == 0) ? true : false\" \n                    :class=\"{ 'btn-outline-danger': (event.publish == 1), 'btn-outline--success': (event.publish != 1) }\"\n                    @click=\"publishEvent()\"\n                >\n                    <i v-if=\"!event.publish\" class=\"fas fa-eye\"></i> \n                    <i v-if=\"event.publish\" class=\"fas fa-eye-slash\"></i> \n                    {{ event.publish == 1 ? trans('em.unpublish_event') : trans('em.publish_event')}}\n                </button>\n            </div>\n        </div>\n\n        \n    </div>\n</template>\n\n<script>\nimport _ from 'lodash';\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\n\nimport TagComponent from '../../tags_manage/components/Tag.vue';\n\nexport default {\n\n    props : [\n        'organisers'\n    ],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    components: {\n        TagComponent,\n    },\n\n    data() {\n        return {\n            tags_ids         : [],\n            tags_options     : [],\n            tmp_tags_ids     : [],\n            selected_tags    : [],\n            is_publishable   : [],\n\n            isLoading        : false,\n            disable          : false,\n\n\n        }\n    },\n\n    computed: {\n        ...mapState( ['tags', 'event_id', 'organiser_id', 'event_step', 'event']),\n    },\n\n    methods: {\n        ...mapMutations(['add', 'update']),\n\n           // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n             // show loader\n            this.showLoaderNotification(trans('em.processing'));\n\n            // prepare form data for post request\n            this.disable = true;\n\n            // prepare form data for post request\n            let post_url    = route('eventmie.myevents_store_event_tags');\n            \n            let post_data   = {\n                'tags_ids'     : this.tags_ids,\n                'event_id'     : this.event_id,\n                'organiser_id' : this.organiser_id\n            };\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n\n                if(res.data.status)\n                {\n                    this.showNotification('success', trans('em.event_save_success'));\n                    // reload page   \n                    // setTimeout(function() {\n                    //     location.reload(true);\n                    // }, 1000);\n\n\n                }\n                this.disable = false;\n                Swal.hideLoading();\n            })\n            .catch(error => {\n                this.disable = false;\n                Swal.hideLoading();\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        \n        \n\n        // get selected tags in case of editing\n        getSelectedtags() {\n            let $this = this;\n            axios.post(route('eventmie.selected_tags'),{\n                event_id      : this.event_id,\n                organiser_id  : this.organiser_id,\n            })\n            .then(res => {\n                // fill data to global tags array\n                this.selected_tags = res.data.selected_event_tags \n\n                \n                // set mutiple tags for multiselect list\n                if(this.selected_tags.length > 0)\n                {\n                    this.tmp_tags_ids = []; \n                    this.selected_tags.forEach(function (v, key) {\n                        this.tmp_tags_ids.push({value : v.id, text : v.title+' ('+v.type+')' });\n                    }.bind(this));\n                }    \n                \n            })\n            .catch(error => {\n                Vue.helpers.axiosErrors(error);\n            });\n        },\n\n\n        // update tags for submit\n        updateTags(){\n            \n            this.tags_ids = '';\n            \n            //tags\n            if(this.tmp_tags_ids.length > 0)\n            {\n                var count = this.tmp_tags_ids.length;\n                this.tmp_tags_ids.forEach(function (value, key) {\n                    this.tags_ids += value.value;\n\n                    // add comma except last key\n                    if(key < (count-1) )\n                        this.tags_ids += ',';\n                }.bind(this));\n            }\n            \n        },\n\n        // publish event\n        publishEvent(){\n            axios.post(route('eventmie.publish_myevent'),{\n                event_id        : this.event_id,\n                organiser_id    : this.organiser_id,\n            })\n            .then(res => {\n                if(res.data.status)\n                {\n                    if(this.event.publish == 1)\n                        this.showNotification('success', trans('em.event_unpublished'));\n                    else\n                        this.showNotification('success', trans('em.event_published'));\n                    \n                    // reload page   \n                    setTimeout(function() {\n                        location.reload(true);\n                    }, 1000);\n                }\n            })\n            .catch(error => {\n                Vue.helpers.axiosErrors(error);\n            });\n        },\n\n        limitText (count) {\n            return trans('em.event')+count +trans('em.tags');\n        },\n\n        // get tags of organiser and tag searching\n        searchTags: _.debounce(function(search) {  \n\n            this.isLoading = true\n\n            let post_url    = route('eventmie.search_tags');\n            \n            let post_data   = {\n                'search'     : search,\n                organiser_id : this.organiser_id, \n            };\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n\n                this.tags_options = [];\n                // fill data to global tags array\n                this.add({  \n                    tags        : res.data.tags,\n                });\n                // set mutiple tags for multiselect list\n                if(this.tags.length > 0)\n                {\n                    this.tags.forEach(function(v, key) {\n                        this.tags_options.push({value : v.id, text : v.title+' ('+v.type+')' });\n                    }.bind(this));\n                    \n                }\n                \n                this.isLoading = false;\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        }, 1000),\n\n        clearAll () {\n            this.tmp_tags_ids = []\n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n\n    },\n    \n    watch: {\n        \n        tmp_tags_ids : function() {\n            this.updateTags();\n        },\n    },\n\n    mounted(){\n        this.isDirtyReset();\n      // if user have no event_id then redirect to details page\n        // if user have no event_id then redirect to details page\n        let event_step  = this.eventStep();\n        \n        if(event_step)\n        {\n            var $this = this;\n            this.getMyEvent().then(function (response){\n                $this.searchTags(null);\n                \n                $this.getSelectedtags();  \n                $this.is_publishable = $this.event.is_publishable ? JSON.parse($this.event.is_publishable) : [] ; \n            });\n\n        }\n        \n        \n    }\n\n}\n</script>","<template>\n    <div>\n   \n        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\" class=\"lgx-contactform\">\n            <input type=\"hidden\" name=\"event_id\" v-model=\"event_id\">\n            <input type=\"hidden\" name=\"organiser_id\" v-model=\"organiser_id\">\n            \n            <div class=\"mb-2\">\n                <label class=\"form-label\">{{ trans('em.meta_title') }}</label>\n                <input type=\"text\" class=\"form-control\"  name=\"meta_title\" v-model=\"meta_title\" @change=\"isDirty()\">\n                <span v-show=\"errors.has('meta_title')\" class=\"help text-danger\">{{ errors.first('meta_title') }}</span>\n            </div>\n\n            <div class=\"mb-2\">\n                <label class=\"form-label\">{{ trans('em.meta_tags') }}</label>\n                <input type=\"text\" class=\"form-control\" name=\"meta_keywords\" v-model=\"meta_keywords\" @change=\"isDirty()\">\n                <span v-show=\"errors.has('meta_keywords')\" class=\"help text-danger\">{{ errors.first('meta_keywords') }}</span>\n            </div>\n\n            <div class=\"mb-2\">\n                <label class=\"form-label\">{{ trans('em.meta_description') }}</label>\n                <input type=\"text\" class=\"form-control\" name=\"meta_description\" v-model=\"meta_description\" @change=\"isDirty()\">\n                <span v-show=\"errors.has('meta_description')\" class=\"help text-danger\">{{ errors.first('meta_description') }}</span>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary btn-lg mt-2\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n        </form>                \n                    \n    </div>\n</template>\n\n<script>\nimport { mapState, mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\nexport default {\n    props: [\n        'event_prop',\n    ],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    data() {\n        return {\n            meta_title       : null,\n            meta_description : null,\n            meta_keywords   : null,\n        }\n    },\n\n    computed: {\n        // get global variables\n        ...mapState( ['event_id', 'organiser_id', 'event']),\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n            \n            // prepare form data for post request\n            let post_url = route('eventmie.myevents_store_seo');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                // on success\n                // use vuex to update global sponsors array\n                if(res.data.status)\n                {\n                    this.showNotification('success', trans('em.seo_saved_successfully'));\n                    // reload page   \n                    setTimeout(function() {\n                        location.reload(true);\n                    }, 1000);\n                }\n\n            })\n            .catch(error => {\n                // only in case or serverValidate\n                if (error.length) {\n                    this.serverValidate(error);\n                }\n            });\n                \n        },\n\n        //edit seo\n        edit_seo(){\n            \n            if(Object.keys(this.event).length > 0)\n            {\n                this.meta_title         =  this.event.meta_title;\n                this.meta_keywords      =  this.event.meta_keywords;\n                this.meta_description   =  this.event.meta_description;\n              \n            }    \n        },\n\n        isDirty() {\n            this.add({is_dirty: true});\n        },\n        isDirtyReset() {\n            this.add({is_dirty: false});\n        },\n    },\n    \n    mounted(){\n        this.isDirtyReset();\n        // if user have no event_id then redirect to details page\n        let event_step     = this.eventStep();\n        \n        if(event_step)\n        {\n            var $this = this;\n            this.getMyEvent().then(function (response){\n                $this.edit_seo();\n            });\n\n        }\n    }\n\n\n}\n</script>","\n/**\n * This is a page specific seperate vue instance initializer\n */\n\n// include vue common libraries, plugins and components\nimport \"../vue_common.js\"\n\n/**\n * Local Third-party Lib Imports\n*/\n/* Instances */\nimport Vuex from 'vuex';\nwindow.Vuex = Vuex;\nVue.use(Vuex);\n\n/* Components */\n\nimport vSelect from \"vue-select\";\nimport Multiselect from \"vue-multiselect\";\nimport DatePicker from \"vue2-datepicker\";\n\n// Register components globally\nVue.component(\"v-select\", vSelect);\nVue.component(\"Multiselect\", Multiselect);\nVue.component(\"DatePicker\", DatePicker);\n\nimport VueConfirmDialog from 'vue-confirm-dialog';\n\nVue.use(VueConfirmDialog);\nVue.component('vue-confirm-dialog', VueConfirmDialog.default);\n\nimport Croppa from 'vue-croppa';\nVue.use(Croppa)\n\n\n/**\n * Local Components \n */\n\nimport TabsComponent from './components/Tabs.vue';\nimport Detail from './components/Detail.vue';\nimport Media from './components/Media.vue';\nimport Location from './components/Location.vue';\nimport Timing from './components/Timing.vue';\nimport Tickets from './components/Tickets.vue';\nimport Poweredby from './components/Poweredby.vue';\nimport Seo from './components/Seo.vue';\n\n\n/**\n * Local Vuex Store \n */\nconst store = new Vuex.Store({\n    state: {\n        event        : [],\n        \n        tickets      : [],\n        tags         : [],\n        event_id     : null,\n        is_dirty     : false,\n        \n        v_sch_index         : 0,\n        v_repetitive        : 0,\n        v_repetitive_days   : [],\n        v_repetitive_dates  : [],\n        v_from_time         : [],\n        v_to_time           : [],\n        organiser_id        : null,\n\n    },\n    mutations: {\n        add(state, {tickets, tags, event_id, v_repetitive, v_repetitive_days, v_repetitive_dates, v_from_time, v_to_time, organiser_id, event, is_dirty}) {\n            if(typeof tickets !== \"undefined\") {\n                state.tickets   = tickets;\n            }\n\n            if(typeof tags !== \"undefined\") {\n                state.tags   = tags;\n            }\n\n            if(typeof event_id !== \"undefined\") {\n                state.event_id   = event_id;\n            }\n\n            if(typeof v_repetitive !== \"undefined\") {\n                state.v_repetitive   = v_repetitive;\n            }\n\n            if(typeof v_repetitive_days !== \"undefined\") {\n                state.v_repetitive_days = v_repetitive_days;\n            }\n\n            if(typeof v_repetitive_dates !== \"undefined\") {\n                state.v_repetitive_dates = v_repetitive_dates;\n            }\n\n            if(typeof v_from_time !== \"undefined\") {\n                state.v_from_time = v_from_time;\n            }\n\n            if(typeof v_to_time !== \"undefined\") {\n                state.v_to_time = v_to_time;\n            }\n\n            if(typeof organiser_id !== \"undefined\") {\n                state.organiser_id = organiser_id;\n            }\n\n            if(typeof event !== \"undefined\") {\n                state.event = event;\n            }\n            \n            if(typeof is_dirty !== \"undefined\") {\n                state.is_dirty = is_dirty;\n            }\n\n            \n\n        },\n        update(state,{ v_sch_index, v_repetitive_days, v_repetitive_dates, v_from_time, v_to_time}){\n\n            if(typeof v_repetitive_days !== \"undefined\" && typeof v_sch_index !== \"undefined\"  ) {\n                state.v_repetitive_days[v_sch_index] = v_repetitive_days;\n            }\n\n            if(typeof v_repetitive_dates !== \"undefined\" && typeof v_sch_index !== \"undefined\"  ) {\n                state.v_repetitive_dates[v_sch_index] = v_repetitive_dates;\n            }\n\n            if(typeof v_from_time !== \"undefined\" && typeof v_sch_index !== \"undefined\"  ) {\n                state.v_from_time[v_sch_index] = v_from_time;\n            }\n\n            if(typeof v_to_time !== \"undefined\" && typeof v_sch_index !== \"undefined\"  ) {\n                state.v_to_time[v_sch_index] = v_to_time;\n            }\n        },\n    },\n});\n\n/**\n * Local Vue Routes \n */\nconst routes = new VueRouter({\n    linkExactActiveClass: 'active',\n    routes: [\n        {\n            path: '/',\n            name: 'detail',\n            component: Detail,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/media',\n            name: 'media',\n            component: Media,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/seo',\n            name: 'seo',\n            component: Seo,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/location',\n            name: 'location',\n            component: Location,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/timing',\n            name: 'timing',\n            component: Timing,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/tickets',\n            name: 'tickets',\n            component: Tickets,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n        {\n            path: '/publish',\n            name: 'publish',\n            component: Poweredby,\n            props: true,\n            beforeEnter(to, from, next) {\n                routeBeforeEnter(to, from, next);\n            },\n        },\n    ],\n});\n\n/* Route configs */\nfunction routeBeforeEnter(to, from, next) {\n    // except refresh\n    if(from.name !== null) {\n        // don't switch if no is_event_id\n        if(is_event_id == 0) {\n            Vue.$confirm({\n                title: trans('em.required'),\n                message: trans('em.please_fill_details'),\n                button: {\n                    yes: trans('em.cancel'),\n                },\n                callback: confirm => {\n                    next(false);\n                }\n            });\n            \n            next(false);\n\n            // in case of force loading other than detail\n            if(to.name == \"detail\") {\n                window.location.href = route('eventmie.myevents_form');\n            }\n            \n        } else {\n            if(store.state.is_dirty) {\n                Vue.$confirm({\n                    title: trans('em.unsaved_changes'),\n                    message: trans('em.save_before_switch_tab'),\n                    button: {\n                        yes: trans('em.switch_tab'),\n                        no: trans('em.stay_here')\n                    },\n                    callback: confirm => {\n                        if(confirm) next();\n                        else next(false);\n                    }\n                });\n            } else {\n                next();\n            }\n        }\n    } else {\n        next();\n    }\n};\n\n/**\n * This is where we finally create a page specific\n * vue instance with required configs\n * element=app will remain common for all vue instances\n * \n */\nwindow.app = new Vue({\n    el: '#eventmie_app',\n    store: store,\n    router: routes,\n    components: {\n        TabsComponent,\n    },\n\n});"],"names":["Vue","_sfc_main","VueConfirmDialog","axios","events","_","res","date_number","Vuex"],"mappings":"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","x_google_ignoreList":[0,1,2]}