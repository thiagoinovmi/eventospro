{"version":3,"file":"Venue-CFJFyphe.js","sources":["../../../node_modules/vue-google-autocomplete/src/VueGoogleAutocomplete.vue","../../../eventmie-pro/resources/js/venues_manage/components/MapAutocomplete.vue","../../../eventmie-pro/resources/js/venues_manage/components/Venue.vue"],"sourcesContent":["<template>\n    <input\n        ref=\"autocomplete\"\n        type=\"text\"\n        :class=\"classname\"\n        :id=\"id\"\n        :placeholder=\"placeholder\"\n        :disabled=\"disabled\"\n        v-model=\"autocompleteText\"\n        @focus=\"onFocus()\"\n        @blur=\"onBlur()\"\n        @change=\"onChange\"\n        @keypress=\"onKeyPress\"\n        @keyup=\"onKeyUp\"\n    />\n</template>\n\n<script>\n    const ADDRESS_COMPONENTS = {\n        subpremise : 'short_name',\n        street_number: 'short_name',\n        route: 'long_name',\n        locality: 'long_name',\n        administrative_area_level_1: 'short_name',\n        administrative_area_level_2: 'long_name',\n        country: 'long_name',\n        postal_code: 'short_name'\n    };\n\n    const CITIES_TYPE = ['locality', 'administrative_area_level_3'];\n    const REGIONS_TYPE = ['locality', 'sublocality', 'postal_code', 'country',\n        'administrative_area_level_1', 'administrative_area_level_2'];\n\n    /*\n      By default, we're only including basic place data because requesting these \n      fields place data is not additionally charged by Google. Please refer to:\n\n      https://developers.google.com/maps/billing/understanding-cost-of-use#basic-data\n    */\n    const BASIC_DATA_FIELDS = ['address_components', 'adr_address', 'alt_id', \n        'formatted_address', 'geometry', 'icon', 'id', 'name', \n        'business_status', 'photo', 'place_id', 'scope', 'type', 'url', \n        'utc_offset_minutes', 'vicinity'];\n\n    export default {\n        name: 'VueGoogleAutocomplete',\n\n        props: {\n          id: {\n            type: String,\n            required: true\n          },\n\n          classname: String,\n\n          placeholder: {\n            type: String,\n            default: 'Start typing'\n          },\n\n          disabled: {\n            type: Boolean,\n            default: false\n          },\n\n          types: {\n            type: String,\n            default: 'address'\n          },\n\n          fields: {\n            type: Array,\n            default: function() {\n              return BASIC_DATA_FIELDS;\n            },\n          },\n\n          country: {\n            type: [String, Array],\n            default: null\n          },\n\n          enableGeolocation: {\n            type: Boolean,\n            default: false\n          },\n\n          geolocationOptions: {\n            type: Object,\n            default: null\n          }\n        },\n\n        data() {\n            return {\n                /**\n                 * The Autocomplete object.\n                 *\n                 * @type {Autocomplete}\n                 * @link https://developers.google.com/maps/documentation/javascript/reference#Autocomplete\n                 */\n                autocomplete: null,\n\n                /**\n                 * Autocomplete input text\n                 * @type {String}\n                 */\n                autocompleteText: '',\n\n                geolocation: {\n                    /**\n                     * Google Geocoder Objet\n                     * @type {Geocoder}\n                     * @link https://developers.google.com/maps/documentation/javascript/reference#Geocoder\n                     */\n                    geocoder: null,\n\n                    /**\n                     * Filled after geolocate result\n                     * @type {Coordinates}\n                     * @link https://developer.mozilla.org/en-US/docs/Web/API/Coordinates\n                     */\n                    loc: null,\n\n                    /**\n                     * Filled after geolocate result\n                     * @type {Position}\n                     * @link https://developer.mozilla.org/en-US/docs/Web/API/Position\n                     */\n                    position: null\n                }\n            }\n        },\n\n        watch: {\n            autocompleteText: function (newVal, oldVal) {\n\t            this.$emit('inputChange', { newVal, oldVal }, this.id);\n            },\n            country: function(newVal, oldVal) {\n              this.autocomplete.setComponentRestrictions({\n                country: this.country === null ? [] : this.country\n              });\n            }\n        },\n\n        mounted: function() {\n          const options = {};\n\n          if (this.types) {\n            options.types = [this.types];\n          }\n\n          if (this.country) {\n            options.componentRestrictions = {\n              country: this.country\n            };\n          }\n\n          this.autocomplete = new google.maps.places.Autocomplete(\n                document.getElementById(this.id),\n                options\n            );\n\n          this.autocomplete.setFields(this.fields);\n\n          this.autocomplete.addListener('place_changed', this.onPlaceChanged);\n        },\n\n        methods: {\n            /**\n             * When a place changed\n             */\n            onPlaceChanged() {\n                let place = this.autocomplete.getPlace();\n\n                if (!place.geometry) {\n                  // User entered the name of a Place that was not suggested and\n                  // pressed the Enter key, or the Place Details request failed.\n                  this.$emit('no-results-found', place, this.id);\n                  return;\n                }\n\n                if (place.address_components !== undefined) {\n                    // return returnData object and PlaceResult object\n                    this.$emit('placechanged', this.formatResult(place), place, this.id);\n\n                    // update autocompleteText then emit change event\n                    this.autocompleteText = document.getElementById(this.id).value\n                    this.onChange()\n                }\n            },\n\n            /**\n             * When the input gets focus\n             */\n            onFocus() {\n              this.biasAutocompleteLocation();\n              this.$emit('focus');\n            },\n\n            /**\n             * When the input loses focus\n             */\n            onBlur() {\n              this.$emit('blur');\n            },\n\n            /**\n             * When the input got changed\n             */\n            onChange() {\n              this.$emit('change', this.autocompleteText);\n            },\n\n            /**\n             * When a key gets pressed\n             * @param  {Event} event A keypress event\n             */\n            onKeyPress(event) {\n              this.$emit('keypress', event);\n            },\n\n            /**\n             * When a keyup occurs\n             * @param  {Event} event A keyup event\n             */\n            onKeyUp(event) {\n              this.$emit('keyup', event);\n            },\n\n            /**\n             * Clear the input\n             */\n            clear() {\n              this.autocompleteText = ''\n            },\n\n            /**\n             * Focus the input\n             */\n            focus() {\n              this.$refs.autocomplete.focus()\n            },\n\n            /**\n             * Blur the input\n             */\n            blur() {\n              this.$refs.autocomplete.blur()\n            },\n\n            /**\n             * Update the value of the input\n             * @param  {String} value\n             */\n            update (value) {\n              this.autocompleteText = value\n            },\n\n            /**\n             * Update the coordinates of the input\n             * @param  {Coordinates} value\n             */\n            updateCoordinates (value) {\n                if (!value && !(value.lat || value.lng)) return;\n                if (!this.geolocation.geocoder) this.geolocation.geocoder = new google.maps.Geocoder();\n                this.geolocation.geocoder.geocode({'location': value}, (results, status) => {\n                    if (status === 'OK') {\n                        results = this.filterGeocodeResultTypes(results);\n                        if (results[0]) {\n                            this.$emit('placechanged', this.formatResult(results[0]), results[0], this.id);\n                            this.update(results[0].formatted_address);\n                        } else {\n                            this.$emit('error', 'no result for provided coordinates');\n                        }\n                    } else {\n                        this.$emit('error', 'error getting address from coords');\n                    }\n                })\n            },\n\n            /**\n             * Update location based on navigator geolocation\n             */\n            geolocate () {\n                this.updateGeolocation ((geolocation, position) => {\n                    this.updateCoordinates(geolocation)\n                })\n            },\n\n            /**\n             * Update internal location from navigator geolocation\n             * @param  {Function} (geolocation, position)\n             */\n            updateGeolocation (callback = null) {\n                if (navigator.geolocation) {\n                    let options = {};\n                    if(this.geolocationOptions) Object.assign(options, this.geolocationOptions);\n                    navigator.geolocation.getCurrentPosition(position => {\n                        let geolocation = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n                        this.geolocation.loc = geolocation;\n                        this.geolocation.position = position;\n\n                        if (callback) callback(geolocation, position);\n                    }, err => {\n                        this.$emit('error', 'Cannot get Coordinates from navigator', err);\n                    }, options);\n                }\n            },\n\n\n            // Bias the autocomplete object to the user's geographical location,\n            // as supplied by the browser's 'navigator.geolocation' object.\n            biasAutocompleteLocation () {\n                if (this.enableGeolocation) {\n                    this.updateGeolocation((geolocation, position) => {\n                        let circle = new google.maps.Circle({\n                            center: geolocation,\n                            radius: position.coords.accuracy\n                        });\n                        this.autocomplete.setBounds(circle.getBounds());\n                    })\n                }\n            },\n\n            /**\n             * Format result from Geo google APIs\n             * @param place\n             * @returns {{formatted output}}\n             */\n            formatResult (place) {\n                let returnData = {};\n                for (let i = 0; i < place.address_components.length; i++) {\n                    let addressType = place.address_components[i].types[0];\n\n                    if (ADDRESS_COMPONENTS[addressType]) {\n                        let val = place.address_components[i][ADDRESS_COMPONENTS[addressType]];\n                        returnData[addressType] = val;\n                    }\n                }\n\n                returnData['latitude'] = place.geometry.location.lat();\n                returnData['longitude'] = place.geometry.location.lng();\n                return returnData\n            },\n\n            /**\n             * Extract configured types out of raw result as\n             * Geocode API does not allow to do it\n             * @param results\n             * @returns {GeocoderResult}\n             * @link https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult\n             */\n            filterGeocodeResultTypes (results) {\n                if (!results || !this.types) return results;\n                let output = [];\n                let types = [this.types];\n                if (types.includes('(cities)')) types = types.concat(CITIES_TYPE);\n                if (types.includes('(regions)')) types = types.concat(REGIONS_TYPE);\n\n                for (let r of results) {\n                    for (let t of r.types) {\n                        if (types.includes(t)) {\n                            output.push(r);\n                            break;\n                        }\n                    }\n                }\n                return output;\n            }\n        }\n    }\n</script>\n","<template>\n     <div>\n        <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"venue\">Google {{ trans('em.search_location') }}</label>\n            <vue-google-autocomplete\n                ref=\"address\"\n                id=\"map\"\n                classname=\"form-control\"\n                :placeholder=\"'Google '+ trans('em.venue')\"\n                v-on:placechanged=\"getAddressData\"\n                country=\"\"\n            >\n            </vue-google-autocomplete>\n        </div>    \n    </div>  \n</template>\n \n<script>\n    \n    import VueGoogleAutocomplete from 'vue-google-autocomplete'\n    \n    export default {\n        components: { VueGoogleAutocomplete },\n \n        data: function () {\n            return {\n              \n              \n            }\n        },\n \n        mounted() {\n            // To demonstrate functionality of exposed component functions\n            // Here we make focus on the user input\n            this.$refs.address.focus();\n        },\n \n        methods: {\n            \n            getAddressData: function (addressData, placeResultData, id) {\n                var place   = [];\n                var place   = addressData;\n                place['formatted_address'] = placeResultData.formatted_address;\n                console.log(place);\n                this.setFields(place)\n            },\n\n            // set fields \n            setFields(place = null){\n                var _this              = this;\n                var country_name       = place.country;\n                this.$parent.venue     = place.route;\n                this.$parent.city      = place.locality;\n                this.$parent.zipcode   = place.postal_code;\n                this.$parent.state     = place.administrative_area_level_1;\n                this.$parent.address   = place.formatted_address;\n                this.$parent.glat      = place.latitude;\n                this.$parent.glong     = place.longitude;\n                // selcet county\n                // this.$parent.countries.forEach(function(value, key){\n                //     if(value.country_name == country_name)\n                //         _this.$parent.country_id = value.id;  \n                // });\n            }\n\n\n            \n            \n        }\n    }\n</script> ","<template>\n\n    <div class=\"custom_model\">\n    \n        <!-- Button trigger modal -->\n        <button type=\"button\" class=\"btn btn-secondary\" @click=\"openModal = true\" v-if=\"!edit_venue\"><i class=\"fa fa-map-location\"></i> {{ trans('em.add_venue') }}</button>\n\n        <div class=\"modal show\" v-if=\"openModal\">\n            <div class=\"modal-dialog modal-lg w-100\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h1 class=\"modal-title fs-3\" id=\"exampleModalLabel\">{{ !edit_venue ? trans('em.new') : trans('em.edit') }} {{ trans('em.venue') }}</h1> \n                        <button type=\"button\" class=\"btn btn-sm bg-danger text-white close\" @click=\"close()\"><span aria-hidden=\"true\">&times;</span></button>\n                    </div>\n\n                    <div class=\"modal-body\">\n                        <form ref=\"form\" @submit.prevent=\"validateForm\" method=\"POST\" enctype=\"multipart/form-data\">\n                            <input v-if=\"edit_venue\" type=\"hidden\" class=\"form-control lgxname\"  name=\"venue_id\" v-model=\"edit_venue.id\">\n                            <input type=\"hidden\" class=\"form-control lgxname\"  name=\"organiser_id\" v-model=\"organiser_id\">\n\n                            <div class=\"modal-body\">\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"name\">{{ trans('em.venue_title') }}<sup>*</sup></label>\n                                    <input type=\"text\" class=\"form-control lgxname\" v-model=\"title\" name=\"title\" v-validate=\"'required'\">\n                                    <span v-show=\"errors.has('title')\" class=\"help text-danger\">{{ errors.first('title') }}</span>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\" for=\"name\">{{ trans('em.slug') }} ({{ trans('em.venue_url') }})<sup>*</sup></label>\n                                    <input type=\"text\" class=\"form-control lgxname\" name=\"slug\" v-model=\"slug\" v-validate=\"'required'\" >\n                                    <p class=\"help text-wrap\">{{ slugUrl() }}</p>\n                                </div>\n\n\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\">{{ trans('em.venue_image_label') }}*</label>\n                                    <input multiple=\"multiple\" type=\"file\" class=\"form-control\" ref=\"images\" name=\"images[]\">\n                                    <span class=\"help-block text-sm\">{{ trans('em.venue_image') }}</span>\n                                    <span v-show=\"errors.has('images')\" class=\"help text-danger\">{{ errors.first('images') }}</span>\n\n                                    <div class=\"col-md-12\">\n                                        <div class=\"row\" v-if=\"multiple_images.length > 0\">\n                                            <div class=\"col-3\"\n                                                v-for=\"(image,index) in multiple_images\" \n                                                :key=\"index\">\n                                                \n                                                <button type=\"button\" class=\"btn-remove-image\" @click=\"deleteImages(image)\">\n                                                    <i class=\"fas fa-times\"></i>\n                                                </button>\n                                                <img :src=\"getImageUrl(image)\" class=\"img-fluid img-rounded m-2\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n\n                                <div class=\"row g-3\">\n\n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"venue_type\">{{ trans('em.venue_type') }}<sup>*</sup></label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"venue_type\" name=\"venue_type\" :placeholder=\"trans('em.venue_type_ie')\"  v-validate=\"'required'\">\n                                        <span v-show=\"errors.has('venue_type')\" class=\"help text-danger\">{{ errors.first('venue_type') }}</span>\n                                    </div>\n\n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"address\">{{ trans('em.address') }}<sup>*</sup></label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"address\" name=\"address\"  v-validate=\"'required'\">\n                                        <span v-show=\"errors.has('address')\" class=\"help text-danger\">{{ errors.first('address') }}</span>\n                                    </div>\n                                    \n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"city\">{{ trans('em.city') }}<sup>*</sup></label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"city\" name=\"city\"  v-validate=\"'required'\">\n                                        <span v-show=\"errors.has('city')\" class=\"help text-danger\">{{ errors.first('city') }}</span>\n                                    </div>\n                                    \n                                  \n                                </div>\n                                \n                                <div class=\"row g-3\">\n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"state\">{{ trans('em.state') }}<sup>*</sup></label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"state\" name=\"state\"  v-validate=\"'required'\">\n                                        <span v-show=\"errors.has('state')\" class=\"help text-danger\">{{ errors.first('state') }}</span>\n                                    </div>\n\n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"zipcode\">{{ trans('em.zipcode') }}<sup>*</sup></label>\n                                        <input type=\"text\" class=\"form-control lgxname\" v-model=\"zipcode\" name=\"zipcode\"  v-validate=\"'required'\">\n                                        <span v-show=\"errors.has('zipcode')\" class=\"help text-danger\">{{ errors.first('zipcode') }}</span>\n                                    </div>\n\n                                    <div class=\"col mb-3\">\n                                        <label class=\"form-label\" for=\"country_id\">{{ trans('em.select_country') }}<sup>*</sup></label>\n                                        <select name=\"country_id\" class=\"form-control\" v-model=\"country_id\">\n                                            <option value=\"0\">-- {{ trans('em.country') }} --</option>\n                                            <option  v-for=\"(country, index) in countries\" :key=\"index\" :value=\"country.id\">{{country.country_name}}</option>\n                                        </select>\n                                        <span v-show=\"errors.has('country_id')\" class=\"help text-danger\">{{ errors.first('country_id') }}</span>\n                                    </div>  \n                                </div>\n\n                                <div class=\"row g-3\">\n                                <!-- CUSTOM -->\n                                <map-autocomplete></map-autocomplete>\n                                <!-- CUSTOM -->\n                                \n                                <div class=\"col mb-3 mt-0\">\n                                    <label class=\"form-label\" for=\"glat\">Google {{ trans('em.map_lat') }}</label>\n                                    <input type=\"text\" class=\"form-control\" name=\"glat\" placeholder=\"e.g 27.1751448\" v-model=\"glat\" @change=\"isDirty()\">\n                                </div>\n\n                                <div class=\"col mb-3 mt-0\">\n                                    <label class=\"form-label\" for=\"glong\">Google {{ trans('em.map_long') }}</label>\n                                    <input type=\"text\" class=\"form-control\" name=\"glong\" v-model=\"glong\" placeholder=\"78.0399535\" @change=\"isDirty()\">\n                                    \n                                </div>\n                                </div>\n                                \n                              \n                                <div class=\"mb-3 mt-0 text-wrap\">\n                                    <label class=\"form-label\" for=\"description\">{{ trans('em.description') }}</label>\n                                    <textarea class=\"form-control\" rows=\"3\" name=\"description\" :value=\"description\" style=\"display:none;\"></textarea>\n                                    <vue-editor\n                                        v-model=\"description\"\n                                        useCustomImageHandler\n                                        @image-added=\"(file, Editor, cursorLocation, resetUploader) => handleImageAdded(file, Editor, cursorLocation, resetUploader, 'description')\"\n                                    ></vue-editor>\n                                    <span v-show=\"errors.has('description')\" class=\"help text-danger\">{{ errors.first('description') }}</span>\n                                </div>\n \n                                \n                            </div>\n                                \n\n\n                            <div class=\"modal-footer\">\n                                <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-sd-card\"></i> {{ trans('em.save') }}</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n</template>\n\n<script>\n\nimport { mapMutations} from 'vuex';\nimport mixinsFilters from '../../mixins.js';\n\n// CUSTOM\nimport MapAutocomplete from './MapAutocomplete.vue';\n// CUSTOM\n\nexport default {\n\n    props: [\"edit_venue\", \"organiser_id\"],\n\n    mixins:[\n        mixinsFilters\n    ],\n\n    components: {\n       \n        MapAutocomplete\n        \n    },\n\n    data() {\n        return {\n            openModal: false,\n                \n            // important!!! declare all form fields\n            title                   : null,\n            description             : null,\n            venue_type              : null,\n            address                 : null,\n            state                   : null,\n            zipcode                 : null,\n            city                    : null,\n            glat                    : null,\n            glong                   : null,\n            \n            images              : [],\n            multiple_images     : [],\n\n            slug                : '',\n            country_id  : 0,\n            countries   : [],\n            \n    \n        }\n    },\n\n    methods: {\n        // update global variables\n        ...mapMutations(['add', 'update']),\n\n        // reset form and close modal\n        close: function () {\n            this.$refs.form.reset();\n            this.$parent.edit_index = null;\n            this.openModal = false;\n            \n            \n        },\n\n        editVenue(){\n            console.log(this.edit_venue);\n\n            \n            this.title                  = this.edit_venue.title;\n            this.description            = this.edit_venue.description;\n            this.venue_type             = this.edit_venue.venue_type;\n            this.address                = this.edit_venue.address;\n            this.state                  = this.edit_venue.state;\n            this.zipcode                = this.edit_venue.zipcode;\n            this.glat                   = this.edit_venue.glat;\n            this.glong                  = this.edit_venue.glong;\n            this.city                   = this.edit_venue.city;\n            this.multiple_images        = this.edit_venue.images ? JSON.parse(this.edit_venue.images) : [];\n            this.slug                   = this.edit_venue.slug;\n            this.country_id             = this.edit_venue.country_id ? this.edit_venue.country_id : 0;\n        },\n\n        // validate data on form submit\n        validateForm(event) {\n            this.$validator.validateAll().then((result) => {\n                if (result) {\n                    this.formSubmit(event);            \n                }\n            });\n        },\n\n        // show server validation errors\n        serverValidate(serrors) {\n            this.$validator.validateAll().then((result) => {\n                this.$validator.errors.add(serrors);\n            });\n        },\n\n        // submit form\n        formSubmit(event) {\n\n            // prepare form data for post request\n            let post_url = route('eventmie.myvenues.store');\n            let post_data = new FormData(this.$refs.form);\n            \n            // axios post request\n            axios.post(post_url, post_data)\n            .then(res => {\n                \n                this.close();\n                this.showNotification('success',  trans('em.venue_saved_successfully'));\n                // reload page   \n                setTimeout(function() {\n                    location.reload(true);\n                }, 1000);\n            \n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        updateItem() {\n            this.$emit('changeItem');\n        },\n\n        deleteImages(image = null){\n               this.showConfirm(trans('em.delete')).then((res) => {\n                if(res) {\n                    // prepare form data for post request\n                    console.log('hello')\n                    let post_url = route('eventmie.delete_venueimage', [this.edit_venue.id]);\n                    let post_data = {\n                        'image'    : image,\n                    };\n                    \n                    // axios post request\n                    axios.post(post_url, post_data)\n                    .then(res => {\n                        // on success\n                        // use vuex to update global sponsors array\n                        if(res.data.status)\n                        {\n                            this.images           = res.data.venue;\n                            \n                            this.multiple_images  = this.images.images ? JSON.parse(this.images.images) : [];\n\n                            this.showNotification('success', trans('em.venue_image_deleted'));\n                        }    \n                    })\n                    .catch(error => {\n                        let serrors = Vue.helpers.axiosErrors(error);\n                        if (serrors.length) {\n                            this.serverValidate(serrors);\n                        }\n                    });\n                }\n            })\n\n        },\n\n        // slug route\n        slugUrl(){\n            if(this.slug != null)\n                return route('eventmie.venues.show',[this.slug]);\n\n            return '';\n        },\n\n        get_countries(){\n            axios.get(route('eventmie.myevents_countries'))\n            .then(res => {\n                if(res.data.countries)\n                {\n                   this.countries = res.data.countries\n                }\n            })\n            .catch(error => {\n                let serrors = Vue.helpers.axiosErrors(error);\n                if (serrors.length) {\n                    this.serverValidate(serrors);\n                }\n            });\n        },\n\n        handleImageAdded: function (file, Editor, cursorLocation, resetUploader, field) {\n            if (!file || !file.type.startsWith(\"image/\")) {\n                this.showNotification(\"error\", \"Invalid file type. Please upload an image.\");\n                resetUploader();\n                return;\n            }\n\n            let post_url = route('eventmie.my_venues_media'); // Same endpoint for all images\n            let formData = new FormData();\n            formData.append(\"image\", file);\n            formData.append(\"field\", field); // Pass the field parameter\n\n            axios.post(post_url, formData)\n                .then(result => {\n                    if (result.data && result.data.url) {\n                        const url = result.data.url;\n                        Editor.insertEmbed(cursorLocation, \"image\", url);\n\n                    } else {\n                        this.showNotification(\"error\", \"Image upload failed. Please try again.\");\n                    }\n                    resetUploader();\n                })\n                .catch(err => {\n                    console.error(err);\n                    this.showNotification(\"error\", \"An error occurred during the upload.\");\n                });\n        }\n\n    },\n\n    mounted(){\n        this.get_countries();\n\n       if(typeof this.edit_venue !== 'undefined') {\n            this.editVenue();\n            this.openModal = true;\n        }\n    },\n\n    watch: {\n        // active when organizer search \n        title: function () {\n            if(this.edit_venue == undefined)\n                this.slug =  (this.title != null) ? this.sanitizeTitle(this.title) : this.sanitizeTitle(this.slug);\n        },\n\n    }\n}\n</script>\n\n<style >\n.pac-container {\n    background-color: #fff;\n    position: absolute!important;\n    z-index: 20000 !important;\n    border-radius: 2px;\n    border-top: 1px solid #d9d9d9;\n    font-family: Arial,sans-serif;\n    box-shadow: 0 2px 6pxrgba(0,0,0,.3);\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    overflow: hidden;\n}\n</style>"],"names":["_sfc_main","res"],"mappings":"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","x_google_ignoreList":[0]}